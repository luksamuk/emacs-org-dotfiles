]#+TITLE:    Alchemist's Emacs Configuration
#+AUTHOR:   Lucas S. Vieira
#+BABEL:    :cache yes
#+PROPERTY: header-args:emacs-lisp :tangle yes
#+STARTUP:  content

* Summary :TOC_3:
- [[#introduction][Introduction]]
  - [[#usage][Usage]]
  - [[#dependencies][Dependencies]]
  - [[#screenshots][Screenshots]]
- [[#preparation][Preparation]]
  - [[#bootstrapping][Bootstrapping]]
  - [[#increase-general-specs][Increase general specs]]
  - [[#packaging][Packaging]]
    - [[#use-package][use-package]]
    - [[#straightel][Straight.el]]
    - [[#el-get][El-Get]]
  - [[#sensible-files][Sensible files]]
  - [[#custom][Custom]]
  - [[#custom-variables][Custom variables]]
- [[#profiling][Profiling]]
  - [[#startup-report][Startup report]]
  - [[#esup][Esup]]
- [[#appearance][Appearance]]
  - [[#fonts][Fonts]]
    - [[#emoji-support][Emoji support]]
    - [[#font-ligatures][Font ligatures]]
  - [[#visual][Visual]]
    - [[#alternative-initial-screen][Alternative initial screen]]
  - [[#keybindings][Keybindings]]
  - [[#autocompletion][Autocompletion]]
  - [[#modeline][Modeline]]
    - [[#telephone-line][Telephone-line]]
  - [[#ivy][Ivy]]
    - [[#ivy-rich][Ivy-rich]]
    - [[#ivy-bibtex][Ivy-Bibtex]]
    - [[#orderless][Orderless]]
    - [[#savehist][Savehist]]
  - [[#buffer-naming][Buffer naming]]
  - [[#multiple-cursors][Multiple cursors]]
  - [[#yank-with-indent][Yank with indent]]
- [[#language-configurations][Language Configurations]]
  - [[#general][General]]
  - [[#org][Org]]
    - [[#general-1][General]]
    - [[#agenda][Agenda]]
    - [[#appearance-1][Appearance]]
    - [[#alert][Alert]]
    - [[#calfw][Calfw]]
    - [[#templates][Templates]]
    - [[#exports-and-org-babel][Exports and Org-Babel]]
    - [[#org-ref][Org-ref]]
    - [[#presentations][Presentations]]
    - [[#org-noter][Org-noter]]
    - [[#org-roam][Org-roam]]
    - [[#org-roam-ui][Org-roam-ui]]
    - [[#org-media-note][Org-media-note]]
    - [[#ox-odt][Ox-ODT]]
    - [[#ox-hugo][Ox-hugo]]
    - [[#org-toc][org-toc]]
    - [[#github-flavored-markdown-export-ox-gfm][Github-Flavored Markdown export (ox-gfm)]]
    - [[#org-tree-slide][Org-tree-slide]]
    - [[#org-mind-map][org-mind-map]]
  - [[#apl][APL]]
    - [[#gnu-apl][GNU APL]]
    - [[#dyalog-apl][Dyalog APL]]
  - [[#assembly][Assembly]]
  - [[#cc][C/C++]]
  - [[#c][C#]]
  - [[#docker][Docker]]
  - [[#elixir][Elixir]]
    - [[#examples-for-dir-localsel][Examples for ~.dir-locals.el~]]
  - [[#forth][Forth]]
  - [[#futhark][Futhark]]
  - [[#go][Go]]
  - [[#java][Java]]
  - [[#julia][Julia]]
  - [[#lean][Lean]]
  - [[#lfe][LFE]]
  - [[#lisp][Lisp]]
    - [[#common-lisp][Common Lisp]]
    - [[#scheme][Scheme]]
    - [[#shen][Shen]]
    - [[#clojure][Clojure]]
    - [[#majestic][Majestic]]
    - [[#appearance-2][Appearance]]
  - [[#net][.NET]]
    - [[#f][F#]]
  - [[#pascal][Pascal]]
  - [[#python][Python]]
    - [[#virtualenv-setup][Virtualenv setup]]
    - [[#blacken-setup][Blacken setup]]
  - [[#standard-ml-sml][Standard ML (SML)]]
  - [[#rust][Rust]]
    - [[#cargo-files][Cargo files]]
    - [[#toml-files][Toml files]]
  - [[#tex][TeX]]
  - [[#web][Web]]
    - [[#nodejs][Node.js]]
    - [[#vuejs][Vue.js]]
    - [[#typescript][TypeScript]]
  - [[#config][Config]]
  - [[#gemini][Gemini]]
  - [[#sql][SQL]]
  - [[#shell][Shell]]
  - [[#yaml][Yaml]]
  - [[#zig][Zig]]
  - [[#glsl][GLSL]]
  - [[#odin][Odin]]
  - [[#finish-org-babel-config][Finish Org-Babel config]]
- [[#language-server-protocol-lsp][Language Server Protocol (LSP)]]
    - [[#lsp-ui-and-lsp-ivy][Lsp-ui and Lsp-ivy]]
    - [[#which-key][Which-key]]
- [[#debug-adapter-protocol-dap][Debug Adapter Protocol (DAP)]]
  - [[#default-configuration][Default configuration]]
  - [[#psx-configuration][PSX configuration]]
- [[#miscellaneous][Miscellaneous]]
  - [[#pinentry][Pinentry]]
  - [[#vterm][VTerm]]
  - [[#projectile][Projectile]]
    - [[#counsel-projectile][Counsel-projectile]]
  - [[#all-the-icons][All-the-icons]]
  - [[#neotree][Neotree]]
  - [[#pdf-tools][PDF Tools]]
  - [[#novel][nov.el]]
  - [[#elfeed][Elfeed]]
  - [[#magit][Magit]]
    - [[#magit-forge][Magit Forge]]
  - [[#deadgrep][Deadgrep]]
  - [[#mpc][MPC]]
  - [[#writeroom-mode][Writeroom Mode]]
  - [[#fancy-battery][Fancy-battery]]
  - [[#display-fill-column-indicator][Display fill column indicator]]
  - [[#kubernetes][Kubernetes]]
  - [[#restclientel][Restclient.el]]
  - [[#terraform][Terraform]]
  - [[#elcord][Elcord]]
- [[#window-shortcuts-for-terminal][Window shortcuts for terminal]]

* Introduction

Welcome to my Emacs configuration. To use it, put this file, the =elisp=
and =sensible= folders under your =.emacs.d= directory.

** Usage

It is advised to change and/or encrypt the files under =sensitive= to
your taste (or just remove their related configuration below).

After doing all of that, copy the contents described under the
[[#sec:bootstrapping][Bootstrapping]] to an =init.el= file under =.emacs.d=, and open
Emacs. This will tangle and compile this file, replacing the
bootstrapping =init.el=.

** Dependencies

This configuration runs file on Emacs 26.2, but is also expected to
run on Emacs 24. Package compatibility is not checked.

As for external binaries, here is a list. Notice that some may not be
vital, and can be replaced/removed.

- =Dina= (default font)
# - =Firefox= (default browser)
- Chromium (default browser)
# - =cmake= and =rtags= (for CMake IDE)
- =gforth= (for Forth evaluation)
- =go= and =godoctor= (for Go Flycheck support)
- =ghc= and =stack= (for Haskell Intero IDE)
- =SLIME=, installed via =Roswell= (for Common Lisp)
- =Qlot=, installed via =Roswell= (for Common Lisp also)
- =Chez Scheme= (for Scheme)
- =purs= and =npm= (for PureScript)
- =rustup=, =rustc=, =cargo= and =racer= (for Rust)
- =TexLive= and =rubber= (for AUCTeX, Org LaTeX export, LaTeX, etc)
- =zsh= (for Ansi-Term)
- =unzip= and =libxml2= support on Emacs (for nov.el)
- =mu4e=, =isync/mbsync=, =gpg2=, =awk= (for Mu4e)
- =git= (for Magit)
# - =Spotify=, =dbus= (for Spotify)
- =w3m= (for w3m browser)
- =clojure= and =leiningen= (for Clojure)
- =shen= (Common Lisp build, for Shen)
- =GNU APL= (for APL)
- =GNU FreeFont=, specially =FreeMono= (for GNU APL)
- =APL385 Unicode= font (for GNU and Dyalog APL; get at Dyalog page)
- =Tern.js= (JavaScript, Node.js support; can be installed with =npm=)
- =Perl= (for =edbi=)
- =Python 3=, =ipython=, =pip= for Python stuff
- =Fira Code= or =Cascadia Code= font for ligatures (when using it -- see Ligatures)
- NerdFonts, specifically ~FuraMono Nerd Font~
- =eslint= for =flymake-eslint=

** Screenshots

Here are some screenshots of how it will look after the configuration.
Notice that transparency is due to a [[https://github.com/tryone144/compton][special fork of compton]].

#+ATTR_ORG: :width 50% :height 50%
[[./screenshots/screen01.png]]

#+ATTR_ORG: :width 50% :height 50%
[[./screenshots/screen02.png]]

* Preparation
** Bootstrapping
:PROPERTIES:
:CUSTOM_ID: sec:bootstrapping
:END:

This init file is heavily inspired by [[https://github.com/freetonik/emacs-dotfiles][freetonik]]'s.

Tangle and compile this file on save.

#+begin_src emacs-lisp
;;;; -*- lexical-binding: t -*-

;;;; Initialization

(defun tangle-init ()
  "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
  (when (equal (buffer-file-name)
               (expand-file-name (concat user-emacs-directory "init.org")))
    ;; Avoid running hooks when tangling.
    (let ((prog-mode-hook nil))
      (org-babel-tangle)
      ;; Byte compilation is optional. Not really something
      ;; that helps a lot with performance
      ;;(byte-compile-file (concat user-emacs-directory "init.el"))
      )))

(add-hook 'after-save-hook 'tangle-init)
#+end_src

This block removes the /"functions might not be defined at runtime"/
warnings. However it never showed up on my configuration, so I'll just
leave it commented.

#+begin_src emacs-lisp :tangle no
;; (eval-when-compile
;;   (setq use-package-expand-minimally byte-compile-current-file))
#+end_src

** Increase general specs

This  increases   the  GC  threshold  to   reduce  garbage  collection
frequency,  and tweaks  other  parameters. They're  initially  good for  loading
packages, but are also important for setting up LSP.

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 100 1024 1024) ; 100 MB
      read-process-output-max (* 1024 1024)
      company-minimum-prefix-length 1)
#+end_src

** Packaging

Prepare packages.
I don't use =melpa-stable=, only because it lacks certain packages.
Also, somehow, =elpa= is inaccessible over HTTPS.

#+begin_src emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
                         ;;("marmalade" . "https://marmalade-repo.org/packages/")
                         ;;("melpa-stable" . "https://stable.melpa.org/packages/")
                         ("melpa" . "https://melpa.org/packages/")
                         ;;("org" . "https://orgmode.org/elpa/")
                         ("nongnu" . "https://elpa.nongnu.org/nongnu/")
                         ("ox-odt" . "https://kjambunathan.github.io/elpa/")))

(package-initialize)
#+end_src

*** use-package

Now we install =use-package=. All subsequent packages are managed by
it.

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))
#+end_src

Ensuring   packages by defaut enables    us   to    make   sure  that everything is properly installed. We do not defer by default, though, since this causes problems with packages (e.g. Dashboard).

#+begin_src emacs-lisp
(setq use-package-always-ensure t
      use-package-always-defer  nil)
#+end_src

*** Straight.el

Some packages use =straight.el= along with =use-package=. Let's enable
it.

Also, *do not use Emacs-GTK on Void Linux*.

#+begin_src emacs-lisp
(defvar bootstrap-version)

(let ((bootstrap-file
       (expand-file-name "straight/repos/straight.el/bootstrap.el" user-emacs-directory))
      (bootstrap-version 5))
  (unless (file-exists-p bootstrap-file)
    (with-current-buffer
	(url-retrieve-synchronously
	 "https://raw.githubusercontent.com/raxod502/straight.el/develop/install.el"
	 'silent 'inhibit-cookies)
      (goto-char (point-max))
      (eval-print-last-sexp)))
  (load bootstrap-file nil 'nomessage))
#+end_src

*** El-Get

Some packages use el-get for managing external stuff.

Also, el-get uses dbus for notifications, so we better deactivate it.

#+begin_src emacs-lisp
(use-package el-get
  :config (progn
            (remove-hook 'el-get-post-install-hooks
                         'el-get-post-install-notification)
            (remove-hook 'el-get-post-remove-hooks
                         'el-get-post-remove-notification)))
#+end_src

** Sensible files

To fetch sensible files in the =sensible/= subdir, we create a helper
function.

#+begin_src emacs-lisp
(defun sensible-file (filename)
  (expand-file-name
   (concat user-emacs-directory "sensible/" filename)))
#+end_src

And to load the file:

#+begin_src emacs-lisp
(defun load-sensible-file (filename)
  (load (sensible-file filename)))
#+end_src

** Custom

The custom file is a thing I never plan to touch.
Let's move it out of the way.

#+begin_src emacs-lisp
(setq custom-file (sensible-file "custom.el"))
(load custom-file)
#+end_src

** Custom variables

Macro for setting custom variables.

Source: https://oremacs.com/2015/01/17/setting-up-ediff/

#+begin_src emacs-lisp
(defmacro csetq (variable value)
  `(funcall (or (get ',variable 'custom-set)
                'set-default)
            ',variable ,value))
#+end_src

* Profiling

** Startup report

#+begin_src emacs-lisp
(add-hook 'emacs-startup-hook
          (lambda ()
            (message "Emacs ready in %s with %d garbage collections."
                     (format "%.2f seconds"
                             (float-time
                              (time-subtract after-init-time
                                             before-init-time)))
                     gcs-done)))
#+end_src

** Esup

Esup is good for profiling Emacs initialization.

To properly use Esup, delete ~~/.emacs.d/init.elc~ before use.

#+begin_src emacs-lisp
(use-package esup
  :defer t
  :config (setq esup-depth 0))
#+end_src

* Appearance

** Fonts

There are many fonts I usually choose. I just uncomment as needed.

Some fonts you might want to download:

- Xanh Mono: https://fonts.google.com/specimen/Xanh+Mono


#+begin_src emacs-lisp
;;(defconst my-default-font "misc-fixed-medium-r-*-*-13-*-*-*-*-*-*-*")
;;(defconst my-default-font "fixed-9")
;;(defconst my-default-font "misc-fixed-*-*-*-*-12-*-*-*-*-*-*-*")
;;(defconst my-default-font "b&h-lucidatypewriter-medium-r-normal-sans-14-*-*-*-*-*-iso8859-1")
;;(defconst my-default-font "FantasqueSansMono Nerd Font-10")
;;(defconst my-default-font "Monoid-8.5")
;;(defconst my-default-font "APL385 Unicode-8")
;;(defconst my-default-font "Fixed-10")
;;(defconst my-default-font "Dina-10")
;;(defconst my-default-font "FreeMono-10")
;;(defconst my-default-font "Iosevka-10")
;;(defconst my-default-font "Fira Code-10")
;;(defconst my-default-font "FuraMono Nerd Font-8")
;;(defconst my-default-font "SauceCodePro Nerd Font-9")
;;(defconst my-default-font "RobotoMono Nerd Font-9")
;;(defconst my-default-font "creep-9")
;;(defconst my-default-font "JuliaMono-9")
(defconst my-default-font "Terminus-11")
;;(defconst my-default-font "Hack-8")
;;(defconst my-default-font "Cascadia Code-9")
;;(defconst my-default-font "Fixedsys Excelsior-11")
;;(defconst my-default-font "Anonymous Pro-11")

;;(defconst my-default-font "Xanh Mono-11")
;;(defconst my-default-font "CMU Typewriter Text-10")

;;(defconst my-default-font-mono "Fira Code")
;;(defconst my-default-font-mono "Iosevka")
;;(defconst my-default-font-mono "FuraMono Nerd Font")
;;(defconst my-default-font-mono "SauceCodePro Nerd Font-9")
;;(defconst my-default-font-mono "RobotoMono Nerd Font-9")
;;(defconst my-default-font-mono "creep-9")
;;(defconst my-default-font-mono "JuliaMono-9")
;;(defconst my-default-font-mono "Cascadia Code-9")
;;(defconst my-default-font-mono "Hack-10")
;;(defconst my-default-font-mono "Terminus-8")
(defconst my-default-font-mono my-default-font)

;;(defconst my-default-font-mono "Xanh Mono-11")
;;(defconst my-default-font-mono "CMU Typewriter Text-10")

;;(defconst my-default-font-variable "Libre Baskerville")
(defconst my-default-font-variable "Cardo")
;;(defconst my-default-font-variable "Source Sans Pro")
#+end_src

The following code describes face  attributes for variable pitch. This
is good for Poet theme, and used in Org Mode plaintext.

#+begin_src emacs-lisp
(set-face-attribute 'default nil :family my-default-font-mono :height 115)
(set-face-attribute 'fixed-pitch nil :family my-default-font-mono :height 115)
(set-face-attribute 'variable-pitch nil :family my-default-font-variable :height 90)
#+end_src

*** Emoji support

Emojify helps showing emoji inside Emacs. Hopefully we don't need
Symbola font.

#+begin_src emacs-lisp
(use-package emojify
  :hook ((after-init-hook . global-emojify-mode)))
#+end_src

*** Font ligatures

#+begin_src emacs-lisp
(use-package ligature
  :config
  ;; Enable the "www" ligature in every possible major mode
  (ligature-set-ligatures 't '("www"))
  ;; Enable traditional ligature support in eww-mode, if the
  ;; `variable-pitch' face supports it
  (ligature-set-ligatures 'eww-mode '("ff" "fi" "ffi"))
  ;; Enable all Cascadia Code ligatures in programming modes
  (ligature-set-ligatures 'prog-mode '("|||>" "<|||" "<==>" "<!--" "####" "~~>" "***" "||=" "||>"
                                       ":::" "::=" "=:=" "===" "==>" "=!=" "=>>" "=<<" "=/=" "!=="
                                       "!!." ">=>" ">>=" ">>>" ">>-" ">->" "->>" "-->" "---" "-<<"
                                       "<~~" "<~>" "<*>" "<||" "<|>" "<$>" "<==" "<=>" "<=<" "<->"
                                       "<--" "<-<" "<<=" "<<-" "<<<" "<+>" "</>" "###" "#_(" "..<"
                                       "..." "+++" "/==" "///" "_|_" "www" "&&" "^=" "~~" "~@" "~="
                                       "~>" "~-" "**" "*>" "*/" "||" "|}" "|]" "|=" "|>" "|-" "{|"
                                       "[|" "]#" "::" ":=" ":>" ":<" "$>" "==" "=>" "!=" "!!" ">:"
                                       ">=" ">>" ">-" "-~" "-|" "->" "--" "-<" "<~" "<*" "<|" "<:"
                                       "<$" "<=" "<>" "<-" "<<" "<+" "</" "#{" "#[" "#:" "#=" "#!"
                                       "##" "#(" "#?" "#_" "%%" ".=" ".-" ".." ".?" "+>" "++" "?:"
                                       "?=" "?." "??" ";;" "/*" "/=" "/>" "//" "__" "~~" "(*" "*)"
                                       "\\\\" "://"))
  ;; Enables ligature checks globally in all buffers. You can also do it
  ;; per mode with `ligature-mode'.
  (global-ligature-mode t))
#+end_src

** Visual

We create a frame a-list which is applied, so that we have customizations
set at standalone or daemonized Emacs.

#+begin_src emacs-lisp
(defconst my-frame-alist
  `((font                 . ,my-default-font)
    (scroll-bar           . -1)
    (height               . 50)
    (width                . 90)
    (cursor-type          . box)
    (alpha                . 85)
    ;;(tty-color-mode       . -1)
    (vertical-scroll-bars . nil)))
(setq default-frame-alist my-frame-alist)
#+end_src

Solaire-mode is great for distinguishing buffers that are not really editable.

#+begin_src emacs-lisp
(use-package solaire-mode
  :config (solaire-global-mode +1))
#+end_src

I use kaolin-bubblegum as my default theme, and kaolin-light when I
want extra stuff.

#+begin_src emacs-lisp
(use-package ef-themes)
(use-package atom-one-dark-theme)
#+end_src

#+begin_src emacs-lisp
;; Dark themes
(defconst my-default-theme-dark
  ;;'vscode-dark-plus
  ;;'catppuccin
  ;;'tron-legacy
  ;;'ef-cherie
  'modus-vivendi
  ;;'atom-one-dark
  )

;; White themes
(defconst my-default-theme-light
  ;;'catppuccin-latte
  'modus-operandi
  )
#+end_src

I'll also add some extra stuff for setting up themes.

#+begin_src emacs-lisp
(defun theme-dark ()
  "Sets the dark theme"
  (interactive)
  (load-theme my-default-theme-dark t))

(defun theme-light ()
  "Sets the light theme"
  (interactive)
  (load-theme my-default-theme-light t))
#+end_src

Now let's install and set them.

#+begin_src emacs-lisp
;;(use-package kaolin-themes)
(use-package modus-themes
  :init
  (setq modus-operandi-theme-rainbow-headings t
        modus-operandi-theme-distinct-org-blocks t
        modus-vivendi-theme-rainbow-headings t
        modus-vivendi-theme-distinct-org-blocks t))

;; Other themes
(use-package plan9-theme)
(use-package poet-theme)
(use-package vscode-dark-plus-theme)
(use-package monokai-pro-theme)
(use-package autothemer)
(use-package catppuccin-theme)
(use-package tron-legacy-theme)

(theme-dark)
;;(theme-light)
#+end_src

There are also some general rules I set up manually.
Also, the scratch buffer now opens with an initial major mode of Org Mode.

#+begin_src emacs-lisp
(setq inhibit-startup-screen        t
      inhibit-splash-screen         t
      show-paren-mode               1
      show-paren-delay              0
      scroll-bar-mode               -1
      browser-url-browse-function   'browse-url-firefox
      ;;browser-url-browse-function   'browse-url-chromium
      linum-format                  "%5d"
      tab-width                     4
      ;; Mouse
      transentient-mark-mode        t
      mouse-wheel-follow-mouse      t
      scroll-step                   1
      scroll-conservatively         101
      mouse-wheel-scroll-amount     '(1)
      mouse-wheel-progressive-speed nil
      initial-major-mode            'org-mode
      initial-scratch-message "\
,#+title:  Scratch Buffer
,#+author: 

# This buffer is for notes you don't want to save.
# If you want to create a file, visit that file with C-x C-f,
# then enter the text in that file's own buffer.

")
(menu-bar-mode -99)
(tool-bar-mode -1)
#+end_src

=linum-mode= is too heavy, so we use =display-line-numbers-mode= instead.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook #'display-line-numbers-mode)
(add-hook 'org-mode-hook #'display-line-numbers-mode)
#+end_src

Also, show indent guides.

#+begin_src emacs-lisp
(use-package highlight-indent-guides
  :config
  (progn
    ;;(setq highlight-indent-guides-method 'character)
    (setq highlight-indent-guides-method 'fill)
    (add-hook 'prog-mode-hook #'highlight-indent-guides-mode)
    (add-hook 'yaml-mode-hook #'highlight-indent-guides-mode)))
#+end_src

*** Alternative initial screen

Taken from [[https://xenodium.com/emacs-a-welcoming-experiment/][here]].
Needs emacs.png on the .emacs.d dir.

#+begin_src emacs-lisp
(defun show-welcome-buffer ()
  "Show *Welcome* buffer."
  (with-current-buffer (get-buffer-create "*Welcome*")
    (setq truncate-lines t)
    (let* ((buffer-read-only)
           (image-path "~/.emacs.d/emacs.png")
           (image (create-image image-path))
           (size (image-size image))
           (height (cdr size))
           (width (car size))
           (top-margin (floor (/ (- (window-height) height) 2)))
           (left-margin (floor (/ (- (window-width) width) 2)))
           (prompt-title "Welcome to Emacs!"))
      (erase-buffer)
      (setq mode-line-format nil)
      (goto-char (point-min))
      (insert (make-string top-margin ?\n ))
      (insert (make-string left-margin ?\ ))
      (insert-image image)
      (insert "\n\n\n")
      (insert (make-string (floor (/ (- (window-width) (string-width prompt-title)) 2)) ?\ ))
      (insert prompt-title))
    (setq cursor-type nil)
    (read-only-mode +1)
    (switch-to-buffer (current-buffer))
    ;;(local-set-key (kbd "q") 'kill-this-buffer)
    ))

;;(setq initial-scratch-message nil)
;;(setq inhibit-startup-screen t)

(when (< (length command-line-args) 2)
  (add-hook 'emacs-startup-hook (lambda ()
                                  (when (display-graphic-p)
                                    (show-welcome-buffer)))))

;; Initial buffer for new frame
;; (setq initial-buffer-choice
;;       (lambda ()
;;         (when (display-graphic-p
;;                (show-welcome-buffer)))
;;         (let ((buffer (get-buffer "*Welcome*")))
;;           (or buffer (get-buffer "*scratch*")))))
#+end_src

** Keybindings

Increasing/decreasing text is useful on presentations.

#+begin_src emacs-lisp
(global-set-key (kbd "C-+") #'text-scale-increase)
(global-set-key (kbd "C--") #'text-scale-decrease)
#+end_src

We also set some bindings for mouse scrolling. They work with the
mouse variables which we've already set before.

#+begin_src emacs-lisp
(global-set-key (kbd "<mouse-4>")   'scroll-down-line)
(global-set-key (kbd "<mouse-5>")   'scroll-up-line)
(global-set-key (kbd "<C-mouse-4>") 'scroll-down-command)
(global-set-key (kbd "<C-mouse-5>") 'scroll-up-command)

(xterm-mouse-mode)
#+end_src

** Autocompletion

Let's set up autocompletions.

#+begin_src emacs-lisp
(setq tab-always-indent 'complete)
(add-to-list 'completion-styles 'initials t)
#+end_src

** Modeline

*** Telephone-line

(Unfortunately, Org Journal doesn't work fine with it... I still need
to mitigate the problem, but I'll just disable it for now)

#+begin_src emacs-lisp
  (use-package telephone-line
    :config (progn
	      (setq telephone-line-primary-left-separator    'telephone-line-cubed-left
		    telephone-line-secondary-left-separator  'telephone-line-cubed-hollow-left
		    telephone-line-primary-right-separator   'telephone-line-cubed-right
		    telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right
		    telephone-line-height                    24
		    telephone-line-evil-use-short-tag        t))
    (telephone-line-mode 1))
#+end_src

*** COMMENT Mini-modeline

Simplistic and small modeline for my needs, specially on EXWM.

#+begin_src emacs-lisp
(use-package mini-modeline
  :config (mini-modeline-mode 1))
#+end_src

** Ivy

I prefer to use Ivy instead of Helm or Emacs' default minibuffer
thing.

#+begin_src emacs-lisp
(use-package counsel)

(use-package all-the-icons-ivy)
(use-package ivy
  :config (progn
            (ivy-mode 1)
            (setq ivy-use-virtual-buffers  t
                  ivy-count-format         "(%d/%d) ")))
#+end_src

*** Ivy-rich

It is also interesting to use =ivy-rich= for a... richer... Ivy
experience.

#+begin_src emacs-lisp
;; Function for buffer icons
(defun ivy-rich-switch-buffer-icon (candidate)
  (with-current-buffer
      (get-buffer candidate)
    (let ((icon (all-the-icons-icon-for-mode major-mode)))
      (if (symbolp icon)
          (all-the-icons-icon-for-mode 'fundamental-mode)
        icon))))

(use-package all-the-icons-ivy-rich)
(use-package ivy-rich
  :config (progn
            (ivy-rich-mode 1)
            (setcdr (assq t ivy-format-functions-alist)
                    #'ivy-format-function-line)
            (setq ivy-rich-display-transformers-list
                  '(ivy-switch-buffer
                    (:columns
                     (;; Buffer icon
                      (ivy-rich-switch-buffer-icon (:width 2))
                      ;; return the candidate itself
                      (ivy-rich-candidate (:width 30))
                      ;; return the buffer size
                      ;;(ivy-rich-switch-buffer-size (:width 7))
                      ;; return the buffer indicators
                      (ivy-rich-switch-buffer-indicators
                       (:width 4 :face error :align right))
                      ;; return the major mode info
                      (ivy-rich-switch-buffer-major-mode
                       (:width 12 :face warning))
                      ;; return project name using `projectile'
                      ;; (ivy-rich-switch-buffer-project
                      ;;  (:width 15 :face success))
                      ;; return file path relative to project root
                      ;; or `default-directory' if project is nil
                      (ivy-rich-switch-buffer-path
                       (:width (lambda (x)
                                 (ivy-rich-switch-buffer-shorten-path
                                  x
                                  (ivy-rich-minibuffer-width 0.3))))))
                     :predicate
                     (lambda (cand) (get-buffer cand)))
                    counsel-M-x
                    ;; (:columns
                    ;;  ;; the original transformer
                    ;;  ((counsel-M-x-transformer (:width 40))
                    ;;   (ivy-rich-counsel-function-docstring
                    ;;    ;; return the docstring of the command
                    ;;    (:face font-lock-doc-face))))
                    ;; Two-column mode
                    (:columns
                     ((counsel-M-x-transformer (:width 40))
                      (ivy-rich-counsel-function-docstring
                       (:face font-lock-doc-face))))
                    counsel-describe-function
                    (:columns
                     ;; the original transformer
                     ((counsel-describe-function-transformer (:width 40))
                      ;; return the docstring of the function
                      (ivy-rich-counsel-function-docstring
                       (:face font-lock-doc-face))))
                    counsel-describe-variable
                    (:columns
                     ;; the original transformer
                     ((counsel-describe-variable-transformer (:width 40))
                      (ivy-rich-counsel-variable-docstring
                       ;; return the docstring of the variable
                       (:face font-lock-doc-face))))
                    counsel-recentf
                    (:columns
                     ;; return the candidate itself
                     ((ivy-rich-candidate (:width 0.8))
                      (ivy-rich-file-last-modified-time
                       ;; return the last modified time of the file
                       (:face font-lock-comment-face))))))))
#+end_src

*** COMMENT Ivy-posframe

Floaty stuff is floaty. But floaty stuff can only be floaty when EXWM
is not being used.

*NOTE:*  ivy-posframe  doesn't  work  well, to  be  honest.  Leave  this
deactivated until further notice.

#+begin_src emacs-lisp
(use-package ivy-posframe
  :config (progn
            (setq ivy-posframe-display-functions-alist
                  '((t . ivy-posframe-display-at-frame-center))
                  ivy-posframe-parameters
                  '((left-fringe   . 8)
                    (right-fringe  . 8))
                  posframe-mouse-banish t)
            (ivy-posframe-mode 1)))
#+end_src

*** Ivy-Bibtex

This tool is very useful for managing Bibtex entries, including notes
and associated PDF files.

Associated file =sensitive/helm-bibtex.el= defines the variable
=bibtex-completion-bibliography=, which is a list of paths to actual
Bibtex files for bibliography. It also defines
=bibtex-completion-library-path=.

#+begin_src emacs-lisp
(use-package helm-bibtex)

(use-package ivy-bibtex
;;  :defer nil
  :config (progn (load-sensible-file "helm-bibtex.el")
                 (setq bibtex-completion-pdf-field "File")))
#+end_src

*** COMMENT Ivy-YouTube

This queries YouTube stuff from Emacs and plays it on the browser.

#+begin_src emacs-lisp
(use-package ivy-youtube :defer t)
#+end_src

*** COMMENT Vertico

Vertical interactive completion for minibuffer.

#+begin_src emacs-lisp
(use-package vertico
  :init (vertico-mode))

(use-package emacs
  :init
  (defun crm-indicator (args)x
    (cons (concat "[CRM] " (car args)) (cdr args)))
  (advice-add #'completing-read-multiple :filter-args #'crm-indicator)
  ;; Disallow cursor in minibuffer prompt
  (setq minibuffer-prompt-properties
	'(read-only t cursor-intangible t face minibuffer-prompt))
  (add-hook 'minibuffer-setup-hook #'cursor-intangible-mode)
  ;; enable recursive minibuffers
  (setq enable-recursive-minibuffers t))
#+end_src

*** Orderless

Adds   orderless  completion   style,   dividing   the  pattern   into
space-separated components.  Matches candidates that match  all of the
components in any order.

For more info, [[https://github.com/oantolin/orderless][see the repository]].

#+begin_src emacs-lisp
(use-package orderless
  :init (progn (icomplete-mode)
	       (setq completion-styles '(orderless)
		     completion-category-overrides '((file (styles . (partial-completion)))))))
#+end_src

*** Savehist

Persist history over Emacs restarts

#+begin_src emacs-lisp
(use-package savehist
  :init (savehist-mode))
#+end_src

** COMMENT Perspective.el

[[https://github.com/nex3/perspective-el][perspective.el]] provides multiple named workspaces, akin to multiple
desktops in some WMs.

This is very useful for certain projects. Use =C-x x= as prefix.

#+begin_src emacs-lisp
(use-package perspective
  :config (persp-mode))
#+end_src

Command cheatsheet:

|---------+-----------------------+-------------------------------------|
| Command | Name                  | Meaning                             |
|---------+-----------------------+-------------------------------------|
| s       | ~persp-switch~        | Query or create perspective         |
| k       | ~persp-remove-buffer~ | Remove buffer from perspective      |
| c       | ~persp-kill~          | Kill perspective                    |
| r       | ~persp-rename~        | Rename current perspective          |
| a       | ~persp-add-buffer~    | Add open buffer to perspective      |
| A       | ~persp-set-buffer~    | Add open buffer, remove others      |
| i       | ~persp-import~        | Import perspective from other frame |
| n/right | ~persp-next~          | Next perspective                    |
| p/left  | ~persp-prev~          | Previous perspective                |
| C-s     | ~persp-state-save~    | Save all perspectives to file       |
| C-l     | ~persp-state-load~    | Load all perspectives from file     |
|---------+-----------------------+-------------------------------------|

** Buffer naming

Uniquify comes with  Emacs and provides a more  sensible buffer naming
convention.

#+begin_src emacs-lisp
(require 'uniquify)
(setq uniquify-buffer-name-style 'forward)
#+end_src

** Multiple cursors

#+begin_src emacs-lisp
(use-package multiple-cursors
  :config
  (progn
    (global-set-key (kbd "C-c m c") 'mc/edit-lines)
    (global-set-key (kbd "C->") 'mc/mark-next-like-this)
    (global-set-key (kbd "C-<") 'mc/mark-previous-like-this)
    (global-set-key (kbd "C-c C-<") 'mc/mark-all-like-this)))
#+end_src

** Yank with indent

#+begin_src emacs-lisp
(defun yank-with-indent ()
  (interactive)
  (let ((indent
         (buffer-substring-no-properties (line-beginning-position) (line-end-position))))
    (message indent)
    (yank)
    (narrow-to-region (mark t) (point))
    (pop-to-mark-command)
    (replace-string "\n" (concat "\n" indent))
    (widen)))
#+end_src

* Language Configurations

Now we create configurations for programming languages.

** General
Indent-guide is useful for showing guide lines on code.

#+begin_src emacs-lisp
;; (use-package indent-guide
;;   :config (indent-guide-global-mode))
#+end_src

This should give us nice, highlighted numbers across all programming
languages.

#+begin_src emacs-lisp
(use-package highlight-numbers
  :defer t
  :config (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+end_src

Let's also install and/or configure globally-needed packages, such as
Flycheck (already installed) and Semantic.

#+begin_src emacs-lisp
(require 'semantic)

;; (global-semanticdb-minor-mode        1)
;; (global-semantic-idle-scheduler-mode 1)
;; (global-semantic-stickyfunc-mode     0)

;; (semantic-mode 1)
#+end_src

Org and Mu4e's compose buffer use =auto-fill-mode=. I like to wrap on
column 80.

#+begin_src emacs-lisp
(setq fill-column 80)
#+end_src

Outshine mode helps us with foldable code.

#+begin_src emacs-lisp
(defvar outline-minor-mode-prefix "\M-#")
(use-package outshine
  :config (add-hook 'prog-mode-hook 'outshine-mode))
#+end_src

Reformatter is useful for defining custom formatters.

#+begin_src emacs-lisp
(use-package reformatter)
#+end_src

** Org
*** General
Org mode already comes with Emacs, but it is important that we make
sure we have the latest version installed.

#+begin_src emacs-lisp
(use-package org
  :defer t
  :ensure org-contrib
  :config (progn
#+end_src

As a general note, I just disable the prompts for code evaluation on
Org. You might want to remove this on your end.

#+begin_src emacs-lisp
(setq-default org-confirm-babel-evaluate nil)
#+end_src

Org images may be rendered in a confusing way if we do not let them be
scaled by ~#+ATTR*~ tags.

#+begin_src emacs-lisp
(setq-default org-image-actual-width nil)
#+end_src

We also need to make sure our HTML exported files open with the
browser and whatever.

#+begin_src emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . "/usr/bin/firefox %s")
        ;;("\\.pdf\\'" . "/usr/bin/zathura %s")
))
#+end_src

The following code will enable fixed-pitch for tables, code blocks and
etcetera in Org Mode. Originally found [[https://stackoverflow.com/questions/3758139/variable-pitch-for-org-mode-fixed-pitch-for-tables][here]].

#+begin_src emacs-lisp 
(mapc (lambda (face)
        (set-face-attribute face nil :inherit 'fixed-pitch))
      '(org-code org-block org-table))
#+end_src

Let's now close this code block.

#+begin_src emacs-lisp
))
#+end_src

*** Agenda

Prepare Portuguese-BR translations for some things, plus some custom
commands.

#+begin_src emacs-lisp
(require 'org-agenda)
(setq org-agenda-include-diary t
      calendar-week-start-day 0
      calendar-day-name-array ["Domingo" "Segunda" "Terça" "Quarta"
                               "Quinta" "Sexta" "Sábado"]
      calendar-month-name-array ["Janeiro" "Fevereiro" "Março" "Abril"
                                 "Maio" "Junho" "Julho" "Agosto"
                                 "Setembro" "Outubro" "Novembro" "Dezembro"])


(add-to-list 'org-agenda-custom-commands
             '("Y" "Agenda anual de aniversários e feriados" agenda "Visão Anual"
               ((org-agenda-span 365)
                (org-agenda-filter-by-category 'Aniversário)
                (org-agenda-time-grid nil))))
(add-to-list 'org-agenda-custom-commands
             '("1" "Agenda mensal" agenda "Visão Mensal"
               ((org-agenda-span 31)
                (org-agenda-time-grid nil))))
(add-to-list 'org-agenda-custom-commands
             '("7" "Agenda dos próximos sete dias" agenda "Visão de Sete Dias"
               ((org-agenda-span 7)
                (org-agenda-time-grid nil))))
#+end_src

There are also some Brazillian holidays we can use.

#+begin_src emacs-lisp
(load (expand-file-name (concat user-emacs-directory "elisp/brazil-holidays.el")))
(setq calendar-holidays holiday-brazil-all)
#+end_src

As for my agenda itself, it is managed through the variable org-agenda-files, which
is defined in a sensitive file.

#+begin_src emacs-lisp
(load-sensible-file "agenda.el")
#+end_src

It is a good idea to remove the org-agenda-files (and diary file) from
=recentf=.

#+begin_src emacs-lisp
(require 'recentf)
(mapc (lambda (file)
        (add-to-list 'recentf-exclude
                     (expand-file-name file)))
      `(,@org-agenda-files ,diary-file))
#+end_src

Since I sync my agenda files across the web, it is very important that
Org files have auto-revert turned on by default.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'auto-revert-mode)
#+end_src

*** Appearance

Let's make sure our Org mode indents and wraps around the 80th column
by using Visual Line Mode. Oh, and we also enable cute bullets.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'toggle-word-wrap)
(add-hook 'org-mode-hook #'org-indent-mode)
(add-hook 'org-mode-hook #'turn-on-visual-line-mode)
#+end_src

I was using =org-bullets= to make things look cute, but it turns out
that =org-superstar= is way cooler.

#+begin_src emacs-lisp
(use-package org-superstar
  :defer t
  :hook (org-mode . org-superstar-mode))
#+end_src

# Let's enforce the 80-column rule with an indicator.

#+begin_src emacs-lisp
(use-package fill-column-indicator
;;  :defer nil
  :config (progn
            (add-hook 'org-mode-hook
                      (lambda ()
                        (setq fci-rule-width 1)
                        (setq fci-rule-color "darkblue")))
            (add-hook 'org-mode-hook 'turn-on-auto-fill)))
#+end_src

Another option is to use =adaptive-wrap=, but I'll leave it off for now.

#+begin_src emacs-lisp
;; (use-package adaptive-wrap)
#+end_src

Other nice features are: hiding emphasis markers, prevent editing
source blocks indentation, make tab acts natively, fontify, ensure
org-babel checks before evaluation, support shift select.

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers        nil
      org-edit-src-content-indentation 0
      org-src-tab-acts-natively        t
      org-src-fontify-natively         t
      org-src-preserve-indentation     t
      org-confirm-babel-evaluate       t
      org-support-shift-select         'always)
#+end_src

Another  interesting thing  to have  is centered  text and  a /variable
pitch/ on  Org files.  This allows non-monospace  fonts on  buffers and
centered things.

Note that  we'll leave olivetti off  for now, as it  doesn't work well
with polymode.

#+begin_src emacs-lisp
(use-package org-variable-pitch)
#+end_src

#+begin_src emacs-lisp
(use-package olivetti
;;  :defer nil
  :config (setq-default olivetti-body-width 150))

(add-hook 'org-mode-hook
          (lambda ()
            ;;(org-variable-pitch-minor-mode 1)
            (olivetti-mode 1)))
#+end_src

Let's also set the default justification to full.

#+begin_src emacs-lisp
(setq-default default-justification 'full)
#+end_src

*** Alert

Org-alert uses libnotify to create notifications for the calendar.

#+begin_src emacs-lisp
(use-package org-alert
  :defer t
  :config (progn
            (setq alert-default-style          'libnotify
		    org-alert-notification-title "*org-mode*"
		    org-alert-interval           21600)
            (org-alert-enable)))
#+end_src

*** Calfw

Calfw is my default calendar tool. I bind it to F6 key.

#+begin_src emacs-lisp
(use-package calfw)
(use-package calfw-ical
  :requires calfw
    :config (progn
              (load-sensible-file "calfw.el")
	      (global-set-key (kbd "<f6>")
			      (lambda ()
				(interactive)
				(cfw:open-ical-calendar *my-calendar*)))))
;; (use-package calfw-org
;;   :requires calfw
;;   :config (progn
;; 	    (setq cfw:org-overwrite-default-keybinding t)
;; 	    (global-set-key (kbd "<f6>")
;; 			      (lambda ()
;; 				(interactive)
;; 				(cfw:open-org-calendar)))))
#+end_src

*** COMMENT Trello

Trello support. Not much needs to be said.

#+begin_src emacs-lisp
(use-package org-trello
  :defer t)
#+end_src

*** Templates

Unfortunately, newer versions of Org do not include template
snippets. Let's fix this.

#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-c C-x t") #'org-insert-structure-template)

(setq org-structure-template-alist
      '(("a" . "export ascii")
        ("c" . "center")
        ("C" . "comment")
        ("e" . "example")
        ("E" . "export")
        ("h" . "export html")
        ("l" . "export latex")
        ("q" . "quote")
        ("s" . "src")
        ("v" . "verse")))
#+end_src

*** Exports and Org-Babel

Let's begin by setting up a few things for Babel.

#+begin_src emacs-lisp
(setq org-export-allow-bind-keywords t)

;;(use-package ob-go)
(use-package ess
  :defer t) ;; package for languages such as Julia, R

(mapc (lambda (x)
        (add-to-list 'org-babel-tangle-lang-exts x))
      '(("js"      . "js")
        ("gnu-apl" . "apl")))
#+end_src

# I'd like that the export process occurs in parallel. Some LaTeX files
# just end up taking a long time.

#+begin_src emacs-lisp
;; (setq org-export-in-background t)
#+end_src

**** HTML

Configure Htmlize to preferred defaults.

#+begin_src emacs-lisp
(use-package htmlize
;;  :defer nil
  :config (setq htmlize-output-type 'css))
#+end_src

Also, make sure Org exports with ~HTML5~ tags.

#+begin_src emacs-lisp
(setq org-html-html5-fancy t)
#+end_src

***** HTML Preview

This previews Org in an EWW buffer.

#+begin_src emacs-lisp
(use-package org-preview-html
  :defer t)
#+end_src

**** LaTeX

#+begin_src emacs-lisp
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

(add-to-list 'org-latex-classes
	     '("abntex2"
	       "\\documentclass{abntex2}
		  [NO-DEFAULT-PACKAGES]
		  [EXTRA]"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
	       ("\\maketitle" . "\\imprimircapa")))

(add-to-list 'org-latex-classes
             '("standalone"
               "\\documentclass{standalone}
                [NO-DEFAULT-PACKAGES]"))
#+end_src

I also like to use the plain PDF export.

#+begin_src emacs-lisp
(setq org-latex-pdf-process '("latexmk -shell-escape -bibtex -f -pdfxe -8bit %f"))
#+end_src

Also, for buffer images to scale and look good, we use this:

#+begin_src emacs-lisp
(plist-put org-format-latex-options :scale 1.2)
#+end_src

When using the =minted= package for source code, make sure that /Common
Lisp/ uses highlighting.  Oh, and use Scheme  highlighting for Majestic
Lisp.

#+begin_src emacs-lisp
(setq org-latex-listings 'minted)
(add-to-list 'org-latex-minted-langs
	     '(lisp "common-lisp"))
(add-to-list 'org-latex-minted-langs
             '(majestic "clj"))
(add-to-list 'org-latex-packages-alist '("" "minted"))
#+end_src

=inputenc= configuration for Unicode characters.

#+begin_src emacs-lisp
(setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
#+end_src

Using =mathletters= from =ucs= also helps a lot.

#+begin_src emacs-lisp
(add-to-list 'org-latex-default-packages-alist
             '("mathletters" "ucs" nil))
#+end_src

**** Reveal.js

Export presentations to Reveal.js.

#+begin_src emacs-lisp
(use-package ox-reveal
  :config (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
                org-reveal-mathjax t))
#+end_src

**** COMMENT Emacs-Reveal

First of  all, remember to  create the folder  ~~/.emacs.d/extra/~. Then
run:

#+begin_src bash :eval no
cd ~/.emacs.d/extra/
git clone --recursive https://gitlab.com/oer/emacs-reveal.git
#+end_src

This may take a while.

#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "~/.emacs.d/extra/emacs-reveal"))
(require 'emacs-reveal)
(setq org-re-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js"
      org-re-reveal-mathjax t)
#+end_src

**** Epub

Export Org filex to Epub format.

#+begin_src emacs-lisp
(use-package ox-epub)
#+end_src

*** COMMENT Org Capture and Org Protocol

Org Protocol configures Emacs to deal properly with the Org Capture
extension for browsers.

Org protocol file location is stored in a sensitive file.

#+begin_src emacs-lisp
(require 'org-protocol)
(require 'org-capture)
(defun sqbrackets->rndbrackets (string)
  (concat (mapcar #'(lambda (c)
                      (cond ((equal c ?\[) ?\()
                            ((equal c ?\]) ?\))
                            (t c)))
                  string)))


(load-sensible-file "org-protocol.el")

(setq org-capture-templates
      `(("p"
         "Protocol" entry (file+headline ,org-capture-file "Inbox")
         ,(concat "* [[%:link][%(sqbrackets->rndbrackets \"%:description\")]]\n"
                  "#+begin_quote\n"
                  "%i\n"
                  "#+end_quote\n\n"
                  "Acesso em: %U\n\n"))
        ("L" "Protocol Link" entry (file+headline ,org-capture-file "Inbox")
         ,(concat "* [[%:link][%(sqbrackets->rndbrackets \"%:description\")]]\n"
                  "Acesso em: %U\n\n"))))
#+end_src

Here is an example of file, which you should store at, say,
=~/.local/share/applications/org-protocol.desktop=:

#+begin_src conf
[Desktop Entry]
Name=org-protocol
Exec=emacsclient %u
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
#+end_src

Finally,   execute   the  following   on   your   console  to   enable
~org-protocol.desktop~ as the default handler of Org Protocol:

#+begin_src bash
xdg-mime default org-protocol.desktop x-scheme-handler/org-protocol
#+end_src

*** Org-ref

Org-ref is the best tool for managing bibliography.
Bibliography location is stored on a sensitive file.

#+begin_src emacs-lisp
(use-package org-ref
;;  :defer nil
  :config (progn
            (load-sensible-file "org-ref.el")
            (require 'org-ref-pdf)
            (require 'org-ref-bibtex)
            (require 'org-ref-url-utils)))
#+end_src

I also need a different citation type to conform with ABNT rules. This
makes sure that ABNTeX2's =\citeonline{}= works.

WARNING: This is borked...

#+begin_src emacs-lisp
(defconst org-ref-abntex-types
  '("citeonline" "Cite without parens (abnTeX2)"))
(add-to-list 'org-ref-cite-types org-ref-abntex-types)
#+end_src

*** Presentations

There are many solutions for presentations using Org Mode.

The first one is epresent.

#+begin_src emacs-lisp :tangle no
(use-package epresent
  :defer t)
#+end_src

There is also org-present.

#+begin_src emacs-lisp
(use-package org-present
  :defer t)
#+end_src

*** Org-noter

Org-noter is a tool for writing notes in Org for PDFs, EPUB, DVI, PS,
etc. See the documentation [[https://github.com/weirdNox/org-noter][here]].

I  like it  when ~org-noter~  opens in  the current  frame, and  when it
doesn't kill the current frame on session end.

#+begin_src emacs-lisp
(use-package org-noter
  :config (require 'org-noter-pdftools))
#+end_src


I'll also add some integration for PDF Tools. More info [[https://github.com/fuxialexander/org-pdftools][here]].

#+begin_src emacs-lisp
(use-package org-pdftools
  :hook (org-mode . org-pdftools-setup-link))

(use-package org-noter-pdftools
  :after org-noter
  :config
  ;; Add a function to ensure precise note is inserted
  (defun org-noter-pdftools-insert-precise-note (&optional toggle-no-questions)
    (interactive "P")
    (org-noter--with-valid-session
     (let ((org-noter-insert-note-no-questions (if toggle-no-questions
                                                   (not org-noter-insert-note-no-questions)
                                                 org-noter-insert-note-no-questions))
           (org-pdftools-use-isearch-link t)
           (org-pdftools-use-freestyle-annot t))
       (org-noter-insert-note (org-noter--get-precise-info)))))

  ;; fix https://github.com/weirdNox/org-noter/pull/93/commits/f8349ae7575e599f375de1be6be2d0d5de4e6cbf
  (defun org-noter-set-start-location (&optional arg)
    "When opening a session with this document, go to the current location.
With a prefix ARG, remove start location."
    (interactive "P")
    (org-noter--with-valid-session
     (let ((inhibit-read-only t)
           (ast (org-noter--parse-root))
           (location (org-noter--doc-approx-location (when (called-interactively-p 'any) 'interactive))))
       (with-current-buffer (org-noter--session-notes-buffer session)
         (org-with-wide-buffer
          (goto-char (org-element-property :begin ast))
          (if arg
              (org-entry-delete nil org-noter-property-note-location)
            (org-entry-put nil org-noter-property-note-location
                           (org-noter--pretty-print-location location))))))))
  (with-eval-after-load 'pdf-annot
    (add-hook 'pdf-annot-activate-handler-functions #'org-noter-pdftools-jump-to-note)))
#+end_src

*** Org-roam

The variable =org-roam-directory= is determined in =sensitive/org-roam.el=.

Let's define  a few  things first.  We start  by setting  our personal
keybindings  to   ~nil~. 

#+begin_src emacs-lisp
(defconst personal-keybindings '())
#+end_src

Then we define a function  for browsing org-roam-server. There are two
versions of it, which can be alternated by specifying that one of them
should not be tangled.

The function ~browse-url~ initializes org-roam-server if necessary, then
opens   it  on a web browser.

#+begin_src emacs-lisp :tangle no
(defun org-roam-server-browse ()
  (interactive)
  (org-roam-server-mode 1)
  (browse-url "http://localhost:8715"))
#+end_src

#+RESULTS:
: org-roam-server-browse

The rest below is related to configuring org-roam itself.

#+begin_src emacs-lisp
(load-sensible-file "org-roam.el")

(use-package org-roam
  :defer t
  :config
  (progn
    (setq org-roam-node-display-template (concat "${title:*} " (propertize "${tags:10}" 'face 'org-tag)))
    (org-roam-db-autosync-mode))
  :bind (("C-c n l" . org-roam-buffer-toggle)
         ("C-c n f" . org-roam-node-find)
         ("C-c n g" . org-roam-graph)
         ("C-c n i" . org-roam-node-insert)
         ("C-c n c" . org-roam-capture)
         ;; Dailies
         ("C-c n j" . org-roam-dailies-capture-today)
         ("C-c n i" . org-roam-insert)))
#+end_src

#+RESULTS:
: org-roam-insert

Another  important  thing to  have  is  support for  org-roam  through
org-protocol. So we do that.

#+begin_src emacs-lisp :tangle no
(require 'org-roam-protocol)
#+end_src

And now,  a useful function  which shows the path  of a file  from the
Org-roam directory.

#+begin_src emacs-lisp
(defun path-to-roam-file (filename)
  (expand-file-name
   (concat org-roam-directory filename)))
#+end_src

Finally, let's  add some templates.  My main way  of doing that  is by
assigning some values.

#+begin_src emacs-lisp
(setq org-roam-capture-templates
      '(("d" "default" plain (function org-roam-capture--get-point)
         "%?" :file-name "%<%Y%m%d%H%M%S>-${slug}"
         :head  "#+TITLE: ${title}\n#+ROAM_KEY: \n#+ROAM_TAGS: \n#+STARTUP: showall\n\n")))
#+end_src

**** Deft

Since I'm using Deft exclusively for =org-roam= stuff, I'll put it here.
It'll provide a nice interface for browsing and filtering notes.

Oh, and deft also works well with variable pitch

#+begin_src emacs-lisp
(use-package deft
  :defer t
  :after org-roam
  :bind
  ("C-c n d" . deft)
  :custom
  (deft-recursive t)
  (deft-use-filter-string-for-filename t)
  (deft-default-extension "org")
  (deft-directory org-roam-directory))
#+end_src

**** Org-roam-bibtex

This  provides tight  integration  between  ~org-roam~, ~helm-bibtex~  and
~org-ref~.

#+begin_src emacs-lisp
(use-package org-roam-bibtex
;;  :defer nil
  :after org-roam
  :hook (org-roam-mode . org-roam-bibtex-mode)
  :bind (:map org-roam-bibtex-mode-map
              (("C-c n c" . org-ref-insert-cite-with-completion)
               ("C-c n b" . ivy-bibtex))))
#+end_src

**** Org-journal

Org-journal is  very useful for keeping  notes. I used to  keep a more
personal journal  with it, but it  is better to use  it in association
with Org Roam for keeping notes.

Oh,  and  the  date  format  conforms  with  Portuguese  speakers,  so
customize if  needed. Tip: Testing with  ~date +"your-custom-format"~ on
console helps.

#+begin_src emacs-lisp
(use-package org-journal
  :defer t
  :bind ("C-c n j" . org-journal-new-entry)
  :custom
  (org-journal-date-prefix "#+TITLE: ")
  (org-journal-file-format "%Y-%m-%d.org")
  (org-journal-dir org-roam-directory)
  (org-journal-date-format "%A, %d de %B de %Y"))
#+end_src

**** COMMENT Org-books

This package is good for managing  bibliography. I'll use it to manage
my reading list.

#+begin_src emacs-lisp
(use-package org-books
  :defer t
  :config (setq org-books-file
                (path-to-roam-file "referencias.org")))
#+end_src

**** COMMENT Org-roam-server

Org-roam-server  is  a  web  application   which  can  be  acessed  on
browser. It  does something  similar to the  graph feature,  but works
much better. I'll spin it up on port 8715 for no reason at all.

#+begin_src emacs-lisp
(use-package org-roam-server
  :defer t
  :after org-roam
  :config
  (progn
    (setq org-roam-server-host "127.0.0.1"
          org-roam-server-port 8715
          org-roam-server-export-inline-images t
          org-roam-server-authenticate nil
          org-roam-server-network-poll t
          org-roam-server-serve-files t
          org-roam-server-served-file-extensions '("pdf" "ogg" "mp4")
          org-roam-server-network-arrows nil
          org-roam-server-network-label-truncate t
          org-roam-server-network-label-truncate-length 60
          org-roam-server-network-label-wrap-length 20)
    (org-roam-server-mode 1)))
#+end_src

*** Org-roam-ui

This replaces Org-roam-server.

#+begin_src emacs-lisp
(use-package org-roam-ui
  :after org-roam
  :hook (after-init . org-roam-ui-mode)
  :config (setq org-roam-ui-sync-theme t
                org-roam-ui-follow t
                org-roam-ui-update-on-save t
                org-roam-ui-open-on-start nil))
#+end_src

*** Org-media-note

This  is useful  for linking  video and  audio with  timestamp on  Org
files.   Allows   link  tags   such   as   ~video~,  ~audio~,   ~videocite~,
~audiocite~. Works with Org-ref.

An example:

#+begin_example
[[video:course.mp4#0:01:56][0:01:56]]
#+end_example

#+begin_src emacs-lisp
(el-get-bundle yuchen-lea/org-media-note)
(use-package mpv)
(use-package pretty-hydra)
(require 'org-media-note)
(progn (add-hook 'org-mode-hook 'org-media-note-setup-org-ref)
       (setq org-media-note-use-refcite-first t))
#+end_src

*** COMMENT Org-link-beautify

#+begin_src emacs-lisp
(use-package org-link-beautify
  :hook (org-mode . org-link-beautify-mode))
#+end_src

*** Ox-ODT

This improves the ODT exporter for Org mode.

#+begin_src emacs-lisp
(use-package ox-odt
;;  :defer nil
  )
#+end_src

*** Ox-hugo

#+begin_src emacs-lisp
(use-package ox-hugo
  :defer t
  :after ox)
#+end_src

*** org-toc

Creates a table of contents automatically inside an org file. Just add
=:TOC:= to a header. More info at [[https://github.com/snosov1/toc-org][its repository]].

#+begin_src emacs-lisp
(use-package toc-org
;;  :defer nil
  :config (progn (add-hook 'org-mode-hook 'toc-org-mode)))
#+end_src

*** COMMENT Polymode

Polymode is  a tool which  allows code blocks in  literate programming
files to use their own mode in  said block.

It doesn't quite work well with ~variable-pitch-mode~ and ~olivetti-mode~;
also doesn't work well with ~org-babel~'s default system, though the use
of a language's mode inside an org source block is very, very useful.

https://polymode.github.io/

#+begin_src emacs-lisp :tangle no
(use-package poly-org :defer nil)
#+end_src

*** COMMENT Valign

This provides visual alignment for Org and Markdown tables, when Emacs
is used on GUI.

Check the project [[https://github.com/casouri/valign][repository]] for more info.

#+begin_src emacs-lisp
(el-get-bundle casouri/valign)
(require 'valign)
(mapc (lambda (hook)
        (add-hook hook #'valign-mode))
      '(org-mode-hook
        markdown-mode-hook))
#+end_src

*** Github-Flavored Markdown export (ox-gfm)

So that we can have nice code blocks on export.

#+begin_src emacs-lisp
(use-package ox-gfm)
#+end_src

*** Org-tree-slide

This is  good for quick  presentations. Seems nicer than  ~epresent~ and
~present.el~.

#+begin_src emacs-lisp
(use-package org-tree-slide
  :config
  (progn
    (define-key org-tree-slide-mode-map (kbd "<f9>") 'org-tree-slide-move-previous-tree)
    (define-key org-tree-slide-mode-map (kbd "<f10>") 'org-tree-slide-move-next-tree)))
#+end_src

*** org-mind-map

This   package  is   outdated   but   it  works   like   a   charm.  Just   ~M-x
org-mind-map-write~ to generate a PDF.

Other engine options: neato, twopi, fdp, sfdp, twopi, circo

#+begin_src emacs-lisp
(use-package org-mind-map
  :init (require 'ox-org)
  :config
  (setq org-mind-map-engine "dot"))
#+end_src

*** COMMENT Org-modern

Modern looks for Org-mode.

#+begin_src emacs-lisp
(use-package org-modern
  :config (progn
	    (add-hook 'org-mode-hook #'org-modern-mode)
	    (setq org-pretty-entities t
		  org-auto-align-tags nil
		  org-tags-column 0
		  org-catch-invisible-edits 'show-and-error
		  org-insert-heading-respect-content t)))

(use-package svg-tag-mode)
#+end_src

** APL

APL language configuration, for writing APL programs.

*** GNU APL

#+begin_src emacs-lisp
(use-package gnu-apl-mode
  :defer t
  :config (progn
	    (setq gnu-apl-show-tips-on-start nil)
#+end_src

Since I already use the SUPER key on =bspwm=, I bind SUPER+p for APL
input.

#+begin_src emacs-lisp
(setq gnu-apl-mode-map-prefix "s-p")
#+end_src

Having  ~C-c C-e~  send a  region to  GNU APL  buffer is  also extremely
convenient. More info on that comes at the Org-babel support section.

#+begin_src emacs-lisp
(define-key gnu-apl-mode-map
  (kbd "C-c C-e")
  #'gnu-apl-interactive-send-region)
#+end_src

Let's close this block...

#+begin_src emacs-lisp
))
#+end_src

**** Font stuff

I sometimes use GNU FreeFont when programming in APL. The hooks are
commented out, because usually the fonts I use have great support for
APL symbols. However, the APL Keyboard needs FreeFont to render
correctly.

I also added support for APL385 Unicode font (which can be found on
Dyalog APL's page).

#+begin_src emacs-lisp
(defvar buffer-face-mode-face)

(defun gnu-apl-font-use-freemono ()
  (interactive)
  (setq buffer-face-mode-face '(:family "FreeMono" :height 100))
  (buffer-face-mode))

(defun gnu-apl-font-use-385 ()
  (interactive)
  (setq buffer-face-mode-face '(:family "APL385 Unicode" :height 90))
  (buffer-face-mode))
#+end_src

The following setups some hooks, but they are not necessary when using
Fura Code!

#+begin_src emacs-lisp
;; old
;; (add-hook 'gnu-apl-interactive-mode-hook 'gnu-apl-font-use-freemono)
;; (add-hook 'gnu-apl-mode-hook 'gnu-apl-font-use-freemono)

;; new
;;(add-hook 'gnu-apl-interactive-mode-hook 'gnu-apl-font-use-385)
;;(add-hook 'gnu-apl-mode-hook 'gnu-apl-font-use-385)

;; apl keyboard
(add-hook 'gnu-apl-keymap-mode-hook 'gnu-apl-font-use-freemono)
#+end_src

**** Input method

We need to set the input method for APL buffers. If it doesn't work, use =M-x
set-input-method=:

#+begin_src emacs-lisp
(mapc (lambda (x)
        (add-hook x (lambda ()
                      (set-input-method "APL-Z"))))
      '(gnu-apl-interactive-mode-hook
        gnu-apl-mode-hook))
#+end_src

Switch to =APL-Z= input method with =C-\=!

**** Org-babel support

Also, add GNU APL to org-babel as language ~apl~.

#+begin_src emacs-lisp
(add-to-list 'org-src-lang-modes '("apl" . gnu-apl))
#+end_src

Another nice thing  to have is to send an  entire block for evaluation
via  Org Babel.  But  this, by  no  means, replaces  the  need for  an
~ob-gnu-apl~ package  or something  like that. Sending  a buffer  to the
inferior APL process  is not the same as sending  it and capturing its
output, which was actually the desired behaviour :/

#+begin_src emacs-lisp
(defun org-babel-execute:apl (body params)
  (ignore params)
  (gnu-apl-interactive-send-string body))
#+end_src

*** Dyalog APL

For performance and extra tools, I use Dyalog for UNIX, though not in
Emacs. However, =.dyalog= file type support is desired:

#+begin_src emacs-lisp
(use-package dyalog-mode
  :defer t)
#+end_src

Dyalog buffers are more usable with the APL385 Unicode font,
previously stated on GNU APL section.

#+begin_src emacs-lisp
(add-hook 'dyalog-mode-hook 'gnu-apl-font-use-385)
#+end_src

**** XCompose helper

One extra thing to remember is that one might want to input some
characters in Dyalog APL. If enabling the APL keyboard is not working,
then we just need to configure our =~/.XCompose= file.

Here is how I enable my compose key to RCtrl on =.xinitrc=:

#+begin_example
$ setxkbmap -layout br -variant abnt2 -option compose:rctrl
#+end_example

Here is a part of =.XCompose= which binds =RCtrl + A= to write some APL
characters.

#+begin_src config-general :tangle no
# APL Characters
# https://www.x.org/releases/X11R7.7/doc/libX11/i18n/compose/en_US.UTF-8.html
<Multi_key> <a> <dead_grave>      : "⋄"
<Multi_key> <a> <s>               : "⌈"
<Multi_key> <a> <exclam>          : "⌶"
<Multi_key> <a> <1>               : "¨"
<Multi_key> <a> <at>              : "⍫"
<Multi_key> <a> <2>               : "¯"
<Multi_key> <a> <numbersign>      : "⍒"
<Multi_key> <a> <3>               : "<"
<Multi_key> <a> <dollar>          : "⍋"
<Multi_key> <a> <4>               : "≤"
<Multi_key> <a> <percent>         : "⌽"
<Multi_key> <a> <5>               : "="
<Multi_key> <a> <dead_circumflex> : "⍉"
<Multi_key> <a> <6>               : "≥"
<Multi_key> <a> <ampersand>       : "⊖"
<Multi_key> <a> <7>               : ">"
<Multi_key> <a> <asterisk>        : "⍟"
<Multi_key> <a> <8>               : "≠"
<Multi_key> <a> <parenleft>       : "⍱"
<Multi_key> <a> <9>               : "∨"
<Multi_key> <a> <parenright>      : "⍲"
<Multi_key> <a> <0>               : "∧"
<Multi_key> <a> <underscore>      : "!"
<Multi_key> <a> <minus>           : "×"
<Multi_key> <a> <plus>            : "⌹"
<Multi_key> <a> <equal>           : "÷"
<Multi_key> <a> <q>               : "?"
<Multi_key> <a> <W>               : "⍹"
<Multi_key> <a> <w>               : "⍵"
<Multi_key> <a> <E>               : "⍷"
<Multi_key> <a> <e>               : "∊"
<Multi_key> <a> <r>               : "⍴"
<Multi_key> <a> <T>               : "⍨"
<Multi_key> <a> <t>               : "∼"
<Multi_key> <a> <Y>               : "¥"
<Multi_key> <a> <y>               : "↑"
<Multi_key> <a> <u>               : "↓"
<Multi_key> <a> <I>               : "⍸"
<Multi_key> <a> <i>               : "⍳"
<Multi_key> <a> <O>               : "⍥"
<Multi_key> <a> <o>               : "○"
<Multi_key> <a> <P>               : "⍣"
<Multi_key> <a> <p>               : "⋆"
<Multi_key> <a> <braceleft>       : "⍞"
<Multi_key> <a> <bracketleft>     : "←"
<Multi_key> <a> <braceright>      : "⍬"
<Multi_key> <a> <bracketright>    : "→"
<Multi_key> <a> <bar>             : "⊣"
<Multi_key> <a> <backslash>       : "⊢"
<Multi_key> <a> <A>               : "⍶"
<Multi_key> <a> <a>               : "⍺"
<Multi_key> <a> <s>               : "⌈"
<Multi_key> <a> <d>               : "⌊"
<Multi_key> <a> <F>               : "⍫"
<Multi_key> <a> <f>               : "_"
<Multi_key> <a> <g>               : "∇"
<Multi_key> <a> <H>               : "⍙"
<Multi_key> <a> <h>               : "∆"
<Multi_key> <a> <J>               : "⍤"
<Multi_key> <a> <j>               : "∘"
<Multi_key> <a> <K>               : "⌺"
<Multi_key> <a> <k>               : "'"
<Multi_key> <a> <L>               : "⌷"
<Multi_key> <a> <l>               : "⎕"
<Multi_key> <a> <colon>           : "≡"
<Multi_key> <a> <semicolon>       : "⍎"
<Multi_key> <a> <quotedbl>        : "≢"
<Multi_key> <a> <apostrophe>      : "⍕"
<Multi_key> <a> <z>               : "⊂"
<Multi_key> <a> <X>               : "χ"
<Multi_key> <a> <x>               : "⊃"
<Multi_key> <a> <C>               : "⍧"
<Multi_key> <a> <c>               : "∩"
<Multi_key> <a> <v>               : "∪"
<Multi_key> <a> <B>               : "£"
<Multi_key> <a> <b>               : "⊥"
<Multi_key> <a> <n>               : "⊤"
<Multi_key> <a> <m>               : "|"
<Multi_key> <a> <less>            : "⍪"
<Multi_key> <a> <comma>           : "⍝"
<Multi_key> <a> <greater>         : "⍀"
# <Multi_key> <a> <period>        : "."
<Multi_key> <a> <question>        : "⍠"
<Multi_key> <a> <slash>           : "⌿"
#+end_src

** Assembly

Make sure =nasm-mode= is used for all Assembly files.

#+begin_src emacs-lisp
  (use-package nasm-mode
    :defer t
    :config (add-to-list 'auto-mode-alist '("\\.asm\\'" . nasm-mode)))
#+end_src

Use =gas-mode= for ~.S~ files.

#+begin_src emacs-lisp :tangle no
(load (expand-file-name (concat user-emacs-directory "elisp/gas-mode.el")))
(add-to-list 'auto-mode-alist '("\\.S\\'" . gas-mode))
#+end_src

** C/C++

Configure C/C++ support for my taste. Defaults include indentation
of width 4 with spaces, K&R style.

#+begin_src emacs-lisp
(require 'cc-mode)

(defun my-c-mode-hook ()
  (setq c-basic-offset   4
        c-default-style  "k&r"
        indent-tabs-mode nil)
  (c-set-offset 'substatement-open 0))

(add-hook 'c++-mode-hook #'my-c-mode-hook)
(add-hook 'c-mode-hook   #'my-c-mode-hook)
#+end_src

# Setup CMake IDE. Notice that we need to have rtags installed
# on the system.

#+begin_src emacs-lisp
;; (use-package rtags)
;; (use-package cmake-ide
;;     :config (cmake-ide-setup))
#+end_src

#  Setup Company C Headers for autocompletion.

#+begin_src emacs-lisp
(use-package company-c-headers
  :requires company
  :init (add-to-list 'company-backends 'company-c-headers))
(add-hook 'c++-mode-hook #'company-mode)
(add-hook 'c-mode-hook #'company-mode)
#+end_src

# To help with autocompletion, we use semantic, previously configured.

To help with autocompletion, we use =irony= and =company-irony=.

#+begin_src emacs-lisp
;; == irony-mode ==
(use-package irony
  :ensure t
  :defer t
  :init
  (add-hook 'c++-mode-hook 'irony-mode)
  (add-hook 'c-mode-hook 'irony-mode)
  (add-hook 'objc-mode-hook 'irony-mode)
  :config
  ;; replace the `completion-at-point' and `complete-symbol' bindings in
  ;; irony-mode's buffers by irony-mode's function
  (defun my-irony-mode-hook ()
    (define-key irony-mode-map [remap completion-at-point]
      'irony-completion-at-point-async)
    (define-key irony-mode-map [remap complete-symbol]
      'irony-completion-at-point-async))
  (add-hook 'irony-mode-hook 'my-irony-mode-hook)
  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options)
  )

(use-package company
  :defer t
  :init (add-hook 'after-init-hook 'global-company-mode)
  :config
  (use-package company-irony :ensure t :defer t)
  (setq company-idle-delay              nil
	company-minimum-prefix-length   2
	company-show-numbers            t
	company-tooltip-limit           20
	company-dabbrev-downcase        nil
	)
  (add-to-list 'company-backends 'company-irony)
  (add-to-list 'company-backends 'company-gtags)
  ;;:bind ("<tab>" . company-complete-common)
  )
(use-package company-irony-c-headers
  :defer t
  :requires company-irony
  :config (add-to-list 'company-backends 'company-irony-c-headers))
#+end_src

Also... enable Flycheck.

#+begin_src emacs-lisp
(add-hook 'c-mode-hook #'flycheck-mode)
(add-hook 'c++-mode-hook #'flycheck-mode)
#+end_src

** C#

Yeah. So... .NET stuff.

#+begin_src emacs-lisp
(use-package csharp-mode
  :defer t)

;; (use-package omnisharp
;;   :defer t
;;   :after csharp-mode
;;   :config (add-hook 'csharp-mode-hook 'omnisharp-mode))
#+end_src

** Docker

Now we add support for Dockerfiles.

#+begin_src emacs-lisp
(use-package dockerfile-mode
  :defer t)
#+end_src

And for Docker Compose too.

#+begin_src emacs-lisp
(use-package docker-compose-mode
  :defer t)
#+end_src

** Elixir

Elixir support.

#+begin_src emacs-lisp
(use-package elixir-mode
  :defer t
  :config (add-hook 'elixir-mode-hook (lambda () (setq indent-tabs-mode nil))))

(use-package ob-elixir
  :defer t)

(use-package alchemist
  :defer t
  :config (add-hook 'elixir-mode-hook 'alchemist-mode))

(use-package mix
  :defer t
  :config (add-hook 'elixir-mode-hook 'mix-minor-mode))
#+end_src

Add configuration for LSP

#+begin_src emacs-lisp
(defvar lsp-elixir--config-options (make-hash-table))

;; (add-hook 'lsp-after-initialize-hook
;;           (lambda ()
;;             (lsp--set-configuration `(:elixirLS ,lsp-elixir--config-options))))
#+end_src

Prepare for usage of ~.dir-locals.el~ for every project

#+begin_src emacs-lisp :tangle no
(use-package eglot
  :config (progn
	    (add-hook 'elixir-mode-hook 'eglot-ensure)
	    (add-to-list
             'eglot-server-programs
	     '(elixir-mode . ("sh"
               "/path/to/elixir-ls/release/language_server.sh")))))
#+end_src

Add flycheck configuration too

#+begin_src emacs-lisp
(use-package flycheck-credo
  :defer t
  :after flycheck
  :init (flycheck-credo-setup)
  :config (setq flycheck-elixir-credo-strict t))
#+end_src

*** Examples for ~.dir-locals.el~

For ~.dir-locals.el~,  create that file  in your project root,  and then
add the following:

#+begin_src emacs-lisp :tangle no :eval no
((elixir-mode
  . ((eglot-workspace-configuration
      . ((:elixirLS . (:projectDir "subdir")))))))
#+end_src

** Forth

Use forth-mode and configure keybindings for evaluating code blocks.

#+begin_src emacs-lisp
  (use-package forth-mode
    :defer t
    :config (progn
	      (define-key forth-mode-map (kbd "C-x C-e") #'forth-eval-last-expression)
	      (define-key forth-mode-map (kbd "C-c C-c") #'forth-eval-region)
              (setq forth-executable "swiftforth")))

#+end_src

** Futhark

Use futhark-mode for Futhark support.

#+begin_src emacs-lisp
(use-package futhark-mode
  :defer t)
#+end_src

** Go

We use go-mode and godoctor to help with autocompletions and indentations.
We also set indentation to tabs of width 4.

We also rely on flycheck for Go.

#+begin_src emacs-lisp
(use-package go-mode
  :defer t
  :config (progn
            (add-hook 'go-mode-hook #'company-mode)
            ;;(add-hook 'go-mode-hook  #'flycheck-mode)
            (add-hook 'go-mode-hook (lambda ()
                                      (setq indent-tabs-mode 1
                                            tab-width        4)))
            ;; (add-to-list 'company-backends 'company-go)
            ))

(use-package godoctor
  :defer t
  :after go-mode)
#+end_src

** COMMENT Haskell

Just make sure we are using intero-mode.

#+begin_src emacs-lisp
(use-package intero
  :defer t
  :config (add-hook 'haskell-mode-hook 'intero-mode))
#+end_src

** Java

So... yeah.

There is a ~java-mode~ bundled with Emacs, so I'm gonna install LSP support.

#+begin_src emacs-lisp :tangle no
(use-package lsp-java)
#+end_src

Eclim is a big hack for dealing with Java projects, Eclipse-style.

#+begin_src emacs-lisp
(use-package eclim
  :config (progn
	    (setq eclimd-autostart t
                  eclim-executable
		  "/usr/lib/eclipse/plugins/org.eclim_2.8.0/bin/eclim"
		  eclimd-default-workspace
		  "~/projects/java/eclipse-workspace/")
	    (add-hook 'java-mode-hook (lambda () (eclim-mode t)))))
#+end_src

Eclim likes an indentation with 8  spaces, so instead of trying to fix
it, I'll just go ahead and use 8 spaces for indentation in Java.

#+begin_src emacs-lisp
(add-hook 'java-mode-hook
	  (lambda ()
	    (setq c-basic-offset 8
		  company-idle-delay 0.2)))
#+end_src

Oh, and uh, Gradle stuff.

#+begin_src emacs-lisp
(use-package gradle-mode
  :defer t
  :commands (gradle-mode)
  :config (add-hook 'java-mode-hook #'gradle-mode))

;; (use-package flycheck-gradle
;;   :defer t
;;   :commands (flycheck-gradle-setup)
;;   :init (add-hook 'java-mode-hook #'flycheck-gradle-setup))
#+end_src

** Julia

#+begin_src emacs-lisp
(use-package julia-mode
  :defer t)
#+end_src

** Lean

#+begin_src emacs-lisp
(use-package lean-mode
  :defer t)
(use-package company-lean
  :defer t
  :after lean-mode)
#+end_src

** LFE

#+begin_src emacs-lisp
(use-package lfe-mode
  :defer t)
#+end_src

** Lisp

There are many dialects of Lisp! I mostly work with Common Lisp,
Scheme, Elisp and Racket.

*** Common Lisp
Here, we use Roswell to manage our SLIME installation.

#+begin_src emacs-lisp
(load (expand-file-name "~/.roswell/helper.el"))
#+end_src

#+begin_src emacs-lisp
(use-package slime)
#+end_src

[OLD!] Let's also make sure that we have our function which starts SLIME
on a specific directory. This is useful for using Qlot.

#+begin_src emacs-lisp :tangle no :eval no
(defun slime-qlot-exec (directory)
  (interactive (list (read-directory-name "Project directory: ")))
  (slime-start :program "qlot"
               :program-args '("exec" "ros" "-S" "." "run")
               :directory directory
               :name 'qlot
               :env (list (concat "PATH=" (mapconcat 'identity exec-path ":")))))
#+end_src

[New!] Add Qlot as underlying Lisp implementation.

#+begin_src emacs-lisp
(setq slime-lisp-implementations
      '((sbcl ("sbcl") :coding-system utf-8-unix)
        (qlot ("qlot" "exec" "ros" "run") :coding-system utf-8-unix)))
#+end_src

Another  nice thing  to do  is to  have a  way to  evaluate a  Roswell
script, which begins with a hashbang.  For that, we create a temporary
buffer, erase the hashbang at the beginning and evaluate it.

Many thanks to @perkunos at Common  Lisp Brasil for providing the most
crucial parts of this function.

#+begin_src emacs-lisp
(defun slime-ros-eval-buffer ()
  (interactive)
  (let ((old-buffer (current-buffer)))
    (with-temp-buffer
      (insert-buffer-substring old-buffer)
      (goto-char 0)
      (flush-lines "^#")
      (flush-lines "^|")
      (flush-lines "^exec")
      (slime-eval-buffer))))
#+end_src

**** slime-company

#+begin_src emacs-lisp
(use-package slime-company
  :defer t
  :after (slime company)
  :config (setq slime-company-completion 'fuzzy
                slime-company-after-completion 'slime-company-just-one-space))
#+end_src

**** StumpWM

Helpers for StumpWM usage.

#+begin_src emacs-lisp
(defun slime-stumpwm-connect ()
  (interactive)
  (slime-connect "localhost" 4005))
#+end_src

*** Scheme

We just make sure Geiser is installed, Plus, set its default implementation
to Chez Scheme.

#+begin_src emacs-lisp
(use-package geiser
  :defer t)

(use-package geiser-chez
  :defer t
  :after geiser)

(use-package geiser-racket
  :defer t
  :after geiser)
#+end_src

We also make sure that we have Racket support.

#+begin_src emacs-lisp
(use-package racket-mode
  :defer t)
#+end_src

**** Loko Scheme

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.sps\\'" . scheme-mode))
(add-to-list 'auto-mode-alist '("\\.sls\\'" . scheme-mode))
#+end_src

*** Shen

We use Shen's Elisp backend.

#+begin_src emacs-lisp
(use-package shen-mode
  :defer t)
(use-package shen-elisp
  :defer t)
#+end_src

*** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode :defer t)
#+end_src

**** CIDER

#+begin_src emacs-lisp
(use-package cider :defer t)
#+end_src

*** Majestic

Yep! Majestic Lisp support is here!

#+begin_src emacs-lisp
(el-get-bundle luksamuk/majestic-mode)
(require 'majestic-mode)
#+end_src

*** Appearance

Improve appearance on all Lisp modes by using:

- ~prettify-symbols~;
- ~fira-code~ (described above -- currently inactive).

#+begin_src emacs-lisp
(defvar *lisp-hooks* '(lisp-mode-hook
                       emacs-lisp-mode-hook
                       scheme-mode-hook
                       shen-mode-hook
                       clojure-mode-hook
                       majestic-mode-hook
                       lfe-mode-hook))
#+end_src

#+begin_src emacs-lisp
(mapc (lambda (hook)
        (add-hook hook #'prettify-symbols-mode)
        ;;(add-hook hook #'fira-code-mode)
        )
      ,*lisp-hooks*)
#+end_src

Use rainbow-delimiters to colorize parens.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config (mapc (lambda (hook)
                  (add-hook hook #'rainbow-delimiters-mode))
		,*lisp-hooks*))
#+end_src

Highlight parentheses to highlight what we're closing.
Instead of resorting to external stuff, we use Emacs' built-in
=show-paren-mode=.

There are three modes for =show-paren-mode=. One which highlights the
brackets only, one which highlights the whole expression, and one
which is mixed (highlights expression if the matching paren is not
visible). I opt for the latter.

For more information, check out [[http://ergoemacs.org/emacs/emacs_highlight_parenthesis.html][this article]] on ErgoEmacs.

#+begin_src emacs-lisp
(require 'paren)
(show-paren-mode 1)
(setq show-paren-style 'mixed)
#+end_src

Also, damn that whole mix-up of tabs and spaces on all Lisps. Just use
spaces at once.

#+begin_src emacs-lisp
(mapc (lambda (hook)
        (add-hook hook #'(lambda () (setq indent-tabs-mode nil))))
      ,*lisp-hooks*)
#+end_src

Paredit is also extremely useful, so let's use it.

#+begin_src emacs-lisp
(use-package paredit
  :config (mapc (lambda (hook)
                  (add-hook hook #'paredit-mode))
                ,*lisp-hooks*))
#+end_src

** .NET

*** F#

#+begin_src emacs-lisp
(use-package fsharp-mode
  :config (add-hook 'fsharp-mode-hook 'highlight-indent-guides-mode))
#+end_src

When F# language is  active, make it so that the ~.fs~  extension belongs to F#,
and ~.fth~ belongs to Forth.

#+begin_src emacs-lisp
(add-to-list 'auto-mode-alist '("\\.fs\\'" . fsharp-mode))
(add-to-list 'auto-mode-alist '("\\.fth\\'" . forth-mode))
#+end_src

** Pascal

#+begin_src emacs-lisp
(add-hook 'pascal-mode-hook
          (lambda ()
            (setq indent-tabs-mode nil
                  tab-width 3)))
#+end_src

** Python

Make sure Python 3 and pip are installed. Then, run these on console:

#+begin_src bash :eval no :tangle no
pip install --user --upgrade pip
#pip install --user --upgrade ipython
pip install --user --upgrade pyzmq
pip install --user --upgrade jupyter
#+end_src

We begin by installing Python Mode. We also enable Flycheck.

#+begin_src emacs-lisp
(use-package python-mode
  :defer t
  :config (progn
            ;; (setq py-shell-name                  "ipython"
            ;;       py-which-bufname               "IPython"
            ;;       py-python-command-args         '("-colors" "Linux")
            ;;       py-smart-indentation           t)
            ;; (add-hook 'python-mode-hook #'flycheck-mode)
            ))
#+end_src

Now we add the org-mode integration for ipython.

#+begin_src emacs-lisp
;;(use-package ob-ipython)
#+end_src

And org-mode integration for Emacs IPython Notebook (ein).

#+begin_src emacs-lisp :tangle no
(use-package ein
  :defer t)
#+end_src

*** Virtualenv setup

#+begin_src emacs-lisp
(use-package pyvenv
  :ensure t
  :config
  (pyvenv-mode t)

  ;; Set correct Python interpreter
  (setq pyvenv-post-activate-hooks
        (list (lambda ()
                (setq python-shell-interpreter (concat pyvenv-virtual-env "bin/python3")))))
  (setq pyvenv-post-deactivate-hooks
        (list (lambda ()
                (setq python-shell-interpreter "python3")))))
#+end_src

*** Blacken setup

Use Blacken for formatting Python buffers.

#+begin_src emacs-lisp
(use-package blacken
  :hook (python-mode . blacken-mode))
#+end_src

** COMMENT Prolog

Use Prolog on Org.

#+begin_src emacs-lisp
(use-package ob-prolog
  :defer t)
#+end_src

Then use Emacs Does Interactive Prolog.

#+begin_src emacs-lisp
;; TODO: prolog-mode-map is void
(use-package ediprolog
  :config (progn
	    (setq ediprolog-system 'swi)
	    (define-key prolog-mode-map (kbd "<f10>") 'ediprolog-dwim)))
#+end_src

** COMMENT PureScript

We use the PureScript IDE. Make sure PureScript is properly installed.

#+begin_src emacs-lisp
(use-package purescript-mode
  :defer t)
(use-package psc-ide
  :defer t
  :requires purescript-mode
  :config (progn
	    (add-hook 'purescript-mode-hook #'psc-ide-mode)
	    (add-hook 'purescript-mode-hook #'company-mode)
	    (add-hook 'purescript-mode-hook #'flycheck-mode)
	    (add-hook 'purescript-mode-hook #'prettify-symbols-mode)
	    (add-hook 'purescript-mode-hook #'turn-on-purescript-indentation)
	    (setq psc-ide-use-npm-bin t)))

#+end_src

** Standard ML (SML)

This configuration  uses PolyML, because  PolyML is available  on Void
Linux repository.

#+begin_src emacs-lisp
(use-package sml-mode
  :defer t
  :config (setq sml-program-name "~/.local/bin/sml"))
#+end_src

#+begin_src emacs-lisp
(use-package ob-sml
  :defer t
  :after sml-mode)
#+end_src

** COMMENT Unison

#+begin_src emacs-lisp
(use-package unison-mode
  :defer t)
#+end_src

** COMMENT OCaml

Must go before ReasonML.

*** Utop

#+begin_src emacs-lisp
(use-package utop
  :defer t
  :config
  (progn
    (add-to-list 'load-path
                 (replace-regexp-in-string
                  "\n" "/share/emacs/site-lisp"
                  (shell-command-to-string "opam config var prefix")))
    (autoload 'utop "utop" "Toplevel for OCaml")
    (setq utop-command "opam config exec -- utop -emacs")))
#+end_src

** COMMENT ReasonML
*** Merlin

#+begin_src emacs-lisp
(let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var"
                                                     "share")))))
  (when (and opam-share (file-directory-p opam-share))
    ;; Register Merlin
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (autoload 'merlin-mode "merlin" nil t nil)
    ;; Automatically start it in OCaml buffers
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; Use opam switch to lookup ocamlmerlin binary
    (setq merlin-command 'opam)))
#+end_src

#+begin_src emacs-lisp
(use-package merlin
  :defer t)
#+end_src

*** reason-mode

#+begin_src emacs-lisp
(use-package reason-mode
  :defer t)
#+end_src

#+begin_src emacs-lisp
(defun shell-cmd (cmd)
  "Returns the stdout output of a shell command or nil if the command returned
   an error"
  (car (ignore-errors (apply 'process-lines (split-string cmd)))))

(defun reason-cmd-where (cmd)
  (let ((where (shell-cmd cmd)))
    (if (not (string-equal "unknown flag ----where" where))
        where)))

(let* ((refmt-bin (or (reason-cmd-where "refmt ----where")
                      (shell-cmd "which refmt")
                      (shell-cmd "which bsrefmt")))
       (merlin-bin (or (reason-cmd-where "ocamlmerlin ----where")
                       (shell-cmd "which ocamlmerlin")))
       (merlin-base-dir (when merlin-bin
                          (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
  ;; Add merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
  (when merlin-bin
    (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
    (setq merlin-command merlin-bin))

  (when refmt-bin
    (setq refmt-command refmt-bin)))

(require 'reason-mode)
(require 'merlin)
(add-hook 'reason-mode-hook (lambda ()
                              (add-hook 'before-save-hook 'refmt-before-save)
                              (merlin-mode)))

(setq merlin-ac-setup t)
#+end_src

*** rtop

Depends on OCaml utop integration

#+begin_src emacs-lisp
(defun rtop-minor-mode (&optional arg)
  (set (make-local-variable 'utop-command)
       "opam config exec -- rtop -emacs")
  (utop-minor-mode arg))

(add-hook 'reason-mode-hook #'rtop-minor-mode)
#+end_src

** Rust

#+begin_src emacs-lisp
(use-package rustic
  :defer t
  :config
  (setq rustic-format-on-save t)
  (setq rustic-lsp-server 'rust-analyzer))
#+end_src

*** Cargo files

#+begin_src emacs-lisp
(use-package cargo
  :defer t
  :after rustic-mode)
#+end_src

*** Toml files

Let's also add support for Toml files.

#+begin_src emacs-lisp
(use-package toml-mode
  :defer t)
#+end_src

** TeX

I used to use latex-preview-pane for comfortable editing, but not
anymore...

#+begin_src emacs-lisp :tangle no
(use-package latex-preview-pane
  :defer t
  :config
  (when (display-graphic-p)
    (latex-preview-pane-enable)))
#+end_src

To compile the current file, we resort to latexmk using LuaTeX. But ordinarily, we'd use Rubber with pdfTeX.

#+begin_src emacs-lisp
(defun rubber-compile-file ()
  (interactive)
  (shell-command
   (concat "latexmk "
           "-shell-escape -bibtex -f -pdflua -8bit -quiet "
           buffer-file-name)
   ;; (concat "rubber -d " buffer-file-name)
   )
  (message "Finished LaTeX compilation."))
#+end_src

It is also interesting to have pretty symbols for our LaTeX files.

#+begin_src emacs-lisp
(use-package latex-pretty-symbols
  :defer t)
#+end_src

** Web

We use web-mode for anything web-related. It also uses js2-mode for
easier parens/javascript editing.

#+begin_src emacs-lisp
(use-package web-mode
  :defer t
  :init (progn
          (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.ts\\'" . web-mode))
          (add-to-list 'auto-mode-alist '("\\.tsx\\'" . web-mode))
          )
  :config (progn
            (add-hook 'web-mode-hook
                      (lambda ()
                        (setq web-mode-enable-auto-closing t)
                        (setq web-mode-markup-indent-offset 2)
                        (setq web-mode-css-indent-offset 4)
                        (setq web-mode-code-indent-offset 4)
                        (setq web-mode-indent-style 2)
                        (setq web-mode-ac-sources-alist
                              '(("css"  . (ac-source-css-property))
                                ("html" . (ac-source-words-in-buffer
                                           ac-source-abbrev))))))))

(use-package json-mode
  :defer t)

(use-package js2-mode
  :defer t
  :after web-mode
  :config (progn
            (setq js2-highlight-level 3)
            ;;(add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))
            ))

(use-package flow-js2-mode
  :defer t
  :after js2-mode
  :config (add-hook 'js2-mode-hook 'flow-minor-enable-automatically))
#+end_src

rjsx-mode works on top of js2-mode for parsing JSX for extra spicyness.

#+begin_src emacs-lisp
(use-package rjsx-mode
  :defer t
  :after flow-js2-mode
  :config (progn
            (setq js2-highlight-level 3)
            (add-hook 'js2-mode-hook 'flow-minor-enable-automatically)
            (add-to-list 'auto-mode-alist '("\\.js\\'" . rjsx-mode))
            (add-to-list 'auto-mode-alist '("\\.jsx\\'" . rjsx-mode))))
#+end_src

There's also Flycheck stuff for ESLint. See Flycheck for details.

Finally, if a local =node_modules= exist, we should use it.

#+begin_src emacs-lisp :tangle no
(defun my-use-eslint-from-node-modules ()
  (let* ((root (locate-dominating-file
                (or (buffer-file-name) default-directory)
                "node_modules"))
         (eslint (and root
                      (expand-file-name
                       "node_modules/eslint/bin/eslint.js"
                       root))))
    (when (and eslint (file-executable-p eslint))
      (setq-local flycheck-javascript-eslint-executable eslint))))

(add-hook 'flycheck-mode-hook #'my-use-eslint-from-node-modules)
#+end_src

Everything is set-up for my config; the last thing to do is fix syntax
on web-mode. Let's do it.

#+begin_src emacs-lisp
(defadvice web-mode-highlight-part (around tweak-jsx activate)
  (if (equal web-mode-content-type "jsx")
      (let ((web-mode-enable-part-face nil))
        ad-do-it)
    ad-do-it))
#+end_src

**** ESLint configuration

This is my =~/.eslintrc=. This configuration also assumes that you are
using =sucrase= with your current setup.

#+begin_src json
{
    "env": {
        es6: true,
        node: true,
    },
    "extends": [
        'airbnb-base',
        'prettier',
    ],
    "plugins": [
        'prettier',
        'react',
    ],
    "globals": {
        Atomics: 'readonly',
        SharedArrayBuffer: 'readonly',
    },
    "parserOptions": {
        ecmaVersion: 2018,
        sourceType: 'module',
    },
    "rules": {
        "prettier/prettier": "error",
        "prettier/tabWidth": 4,
        "indent": ["error", 4],
        "class-methods-use-this": "off",
	"no-console": "off",
        "no-param-reassign": "off",
        "camelcase": "off",
        "no-unused-vars": ["error", { "argsIgnorePattern": "next" }],
        "react/jsx-no-undef": 1,
        "react/jsx-uses-react": 1,
        "react/jsx-uses-vars": 1,
    },
}
#+end_src

If needed be, one can also create a project local file =.eslintrc.js=
with the same configuration, like this:

#+begin_src js
module.exports = {
    env: {
        es6: true,
        node: true,
    },
    extends: [
        'airbnb-base',
        'prettier',
    ],
    plugins: [
        'prettier',
        'react',
    ],
    globals: {
        Atomics: 'readonly',
        SharedArrayBuffer: 'readonly',
    },
    parserOptions: {
        ecmaVersion: 2018,
        sourceType: 'module',
    },
    rules: {
        "prettier/prettier": "error",
        "prettier/tabWidth": 4,
        "indent": ["error", 4],
        "class-methods-use-this": "off",
        "no-param-reassign": "off",
        "camelcase": "off",
        "no-unused-vars": ["error", { "argsIgnorePattern": "next" }],
        "react/jsx-no-undef": 1,
        "react/jsx-uses-react": 1,
        "react/jsx-uses-vars": 1,
    },
};
#+end_src

It is also important to add the following =.prettierrc= to your home
path and your project path.

#+begin_src json
{
    "singleQuote":   true,
    "trailingComma": "es5",
    "tabWidth":      4,
    "useTabs":       false,
}
#+end_src

*** Node.js

I use =tern.js= for JS autocompletions with Node.js. Make sure you have
=tern= installed. You should also take a look at [[https://truongtx.me/2014/04/20/emacs-javascript-completion-and-refactoring][this tutorial]].

#+begin_src emacs-lisp
(use-package tern
  :defer t)
(use-package tern-auto-complete
  :defer t
  :after tern
  :config (progn
	    (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
	    (add-hook 'js2-mode-hook 'auto-complete-mode)
	    (eval-after-load 'tern
	      '(progn
		 (require 'tern-auto-complete)
		 (tern-ac-setup)))))
#+end_src

For each new project, you need to create a =.tern-project= file on its
folder and drop the following contents:

#+begin_example
{
  "plugins": {
    "node": {
    }
  }
}
#+end_example

As for =npm=, I just install =npm-mode= and leave it globally enabled --
what the heck, I use Emacs as a daemon anyway. I'll disable if
anything seems weird.

(So yeah, it became weird. Having an "npm" mode around is a very
strange thing. I'll just disable it)

#+begin_src emacs-lisp
;; (use-package npm-mode
;;   :config (npm-global-mode))
#+end_src

*** Vue.js

#+begin_src emacs-lisp
(use-package vue-mode
  :mode "\\.vue\\'"
  :config
  (add-hook 'vue-mode-hook #'lsp)
  (setq prettier-js-args '("--parser vue")
	mmm-submode-decoration-level 2)
  ;; I hate that ugly background color
  (add-hook 'vue-mode-hook
	    (lambda ()
	      (set-face-background 'mmm-default-submode-face nil))))
#+end_src

*** TypeScript

Install the following first:

#+begin_src bash :exec no :tangle no
npm i -g tern prettier
#+end_src

For managing Node versions, I recommend NVM.

#+begin_src emacs-lisp
(use-package rjsx-mode)

(use-package typescript-mode
  :config
  (add-to-list 'auto-mode-alist '("\\.js.*$" . rjsx-mode)))

(use-package tide)
(use-package yasnippet)
(use-package prettier-js)


(defun tide-setup-hook ()
  (tide-setup)
  (eldoc-mode)
  (tide-hl-identifier-mode +1)
  (flycheck-mode +1)
  (setq web-mode-enable-auto-quoting nil
	web-mode-markup-indent-offset 2
	web-mode-code-indent-offset 2
	web-mode-attr-indent-offset 2
	web-mode-attr-value-indent-offset 2
	;;lsp-eslint-server-command ...
	)
  (set (make-local-variable 'company-backends)
       '((company-tide company-files :with company-yasnippet)
	 (company-dabbrev-code company-dabbrev))))

;;(add-hook 'before-save-hook 'tide-format-before-save)
(add-hook 'typescript-mode-hook 'tide-setup-hook)
(flycheck-add-mode 'typescript-tslint 'typescript-mode-hook)
(add-hook 'web-mode-hook 'company-mode)
(add-hook 'typescript-mode-hook 'prettier-js-mode)

(yas-global-mode 1)
#+end_src

** Config

We use a mode for editing Linux config files.

#+begin_src emacs-lisp
(use-package config-general-mode
  :defer t)
#+end_src

** Gemini

Gemini files  are usually  tagged with  ~.gmi~, and  are used  on Gemini
protocol for the small web. I'll just configure a major mode for it so
that one can properly work on it with justified text and etc.

#+begin_src emacs-lisp
(el-get-bundle gemini-mode
  :url "https://git.carcosa.net/jmcbray/gemini.el/raw/branch/master/gemini-mode.el")

(require 'gemini-mode)
#+end_src

** SQL

Support for SQL on Org-babel.

#+begin_src emacs-lisp
(use-package ob-sql-mode
  :defer t)
#+end_src

** Shell

Set default shell.

#+begin_src emacs-lisp
(setq-default shell-file-name "/bin/zsh")
#+end_src

** Yaml

#+begin_src emacs-lisp
(use-package yaml-mode
  :after highlight-indent-guides
  :config
  (progn
    (add-hook 'yaml-mode-hook #'display-line-numbers-mode)))
#+end_src

** Zig

Also defines ZLS path.

#+begin_src emacs-lisp
(use-package zig-mode
  :config
  ;;(setq lsp-zig-zls-executable "/path/to/zls")
  )
#+end_src

** GLSL

Welp....

#+begin_src emacs-lisp
(use-package glsl-mode)
(use-package company-glsl)
#+end_src

** Odin

#+begin_src emacs-lisp
(el-get-bundle mattt-b/odin-mode)
(require 'odin-mode)
#+end_src

** Finish Org-Babel config

#+begin_src emacs-lisp
(org-babel-do-load-languages 'org-babel-load-languages
                             '((lisp   . t)
                               ;;(go     . t)
                               ;;(shell  . t)
                               (dot    . t)
                               (js     . t)
                               ;;(julia  . t)
                               (C      . t)
                               (scheme . t)
                               ;;(shen   . t)
                               (sml . t)
                               ;; (prolog . t)
                               (python . t)
                               (ein    . t)
                               (sql    . t)))
#+end_src

* Language Server Protocol (LSP)

This is for providing IDE-like experience in some languages.

Our prefix for LSP is ~C-l~.

#+begin_src emacs-lisp
(setq lsp-keymap-prefix "C-l")

(use-package lsp-mode
  :defer t
  :diminish lsp-mode
  :hook ((java-mode   . lsp-deferred)
         ;;(rust-mode . lsp-deferred)
         (clojure-mode . lsp-deferred)
         (clojurec-mode . lsp-deferred)
         (clojurescript-mode . lsp-deferred)
         (elixir-mode . lsp-deferred)
         (zig-mode . lsp-deferred)
         (dart-mode . lsp-deferred)
         (go-mode . lsp-deferred)
         (fsharp-mode . lsp-deferred)
         (terraform-mode . lsp-deferred)
         (python-mode . lsp-deferred)
	 (lsp-mode   . lsp-enable-which-key-integration))
  :commands (lsp lsp-deferred)
  :config
  ;; Dart config
  (setq lsp-lens-enable t
        lsp-signature-auto-activate nil)
  (add-to-list 'company-backends 'company-capf)
  ;; Clojure config
  (mapc (lambda (m) (add-to-list 'lsp-language-id-configuration
				 `(,m . "clojure")))
	'(clojure-mode
	  clojurec-mode
	  clojurescript-mode
	  clojurex-mode)))

;; LSP configuration for Python. Make sure you also have the Jedi language server:
;; pip install jedi-language-server
;; (or, on Linux, just install it with your package manager)
(use-package lsp-jedi)
#+end_src

*** Lsp-ui and Lsp-ivy

Let's add ~lsp-ui~ and ~lsp-ivy~.

#+begin_src emacs-lisp
(use-package lsp-ui
  :defer t
  :commands lsp-ui-mode
  :config (progn
	    (add-to-list 'lsp-ui-doc-frame-parameters '(vertical-scroll-bars . t))
            (add-to-list 'lsp-ui-doc-frame-parameters '(mouse-wheel-mode . t))))

(use-package lsp-ivy
  :defer t
  :commands lsp-ivy-workspace-symbol)
#+end_src

*** Which-key

Finally, let's enable ~which-key~.

#+begin_src emacs-lisp
(use-package which-key
  :config (which-key-mode))
#+end_src

** COMMENT Dart

Dart tools for Dart and Flutter development.

#+begin_src emacs-lisp
(use-package dart-mode
  :config
  (progn
    (setq lsp-dart-dap-flutter-hot-reload-on-save t
          dart-format-on-save t)
    (define-key dart-mode-map (kbd "C-c C-c C-c") 'lsp-dart-run)
    (define-key dart-mode-map (kbd "C-c C-c r") 'lsp-dart-dap-flutter-hot-reload)
    (define-key dart-mode-map (kbd "C-c C-c C-r") 'lsp-dart-dap-flutter-hot-restart)))

(use-package lsp-dart
  :after '(lsp dart-mode))
#+end_src

Let's add a custom formatter.

#+begin_src emacs-lisp
(reformatter-define dart-format
  :program "dart"
  :args '("format"))

(with-eval-after-load "dart-mode"
  (define-key dart-mode-map (kbd "C-c C-c f") 'dart-format-buffer))
#+end_src

*** Hover.el

Hover is a tool to run Flutter applications outside of an emulator.

Install Hover as described in https://github.com/go-flutter-desktop/hover.

#+begin_src emacs-lisp
(use-package hover
  :after dart-mode
  :config
  (progn
    (define-key dart-mode-map (kbd "C-c C-c h") 'hover-run-or-hot-reload)
    (setq hover-hot-reload-on-save t
          hover-clear-buffer-on-hot-restart t)))
#+end_src

* Debug Adapter Protocol (DAP)

DAP is a wire protocol for communication between the Emacs client and
the Debug Server, similar to LSP.

** Default configuration

#+begin_src emacs-lisp
(use-package exec-path-from-shell
  :ensure
  :init (exec-path-from-shell-initialize))

(use-package dap-mode
  :defer t
  :after lsp-mode
  :config (progn
            ;;(require 'dap-elixir)
            ;;(require 'dap-cpptools)
            (dap-mode 1)
	    (dap-ui-mode 1)
	    (dap-tooltip-mode 1)
	    (tooltip-mode 1)
            (dap-ui-controls-mode 1)

            ;; C debugging
            (require 'dap-gdb)
            
            ;; Rust debugging
            ;; (require 'dap-lldb)
            ;; (require 'dap-gdb-lldb)
            ;; (dap-gdb-lldb-setup)
            ;; (dap-register-debug-template
	    ;;  "Rust::LLDB Run Configuration"
	    ;;  (list :type "lldb"
	    ;;        :request "launch"
	    ;;        :name "LLDB::Run"
	    ;;        :gdbpath "rust-lldb"
	    ;;        :target nil
	    ;;        :cwd nil)))
  ))
#+end_src

** PSX configuration

#+begin_src emacs-lisp
(dap-register-debug-template
 "PSX::Debug"
 (list :type "gdbserver"
       :request "attach"
       :gdb-path "/usr/bin/gdb-multiarch"
       :target ":3333"
       :name "PSX::Debug"
       :executable "${workspaceFolder}/build/${workspaceFolderName}.elf"
       :cwd "${workspaceFolder}"
       :valuesFormatting "parseText"
       :stopAtConnect t))
#+end_src

* Miscellaneous

Now we'll configure some useful tools.

** Pinentry

#+begin_src emacs-lisp
(use-package pinentry
  :config (progn
            (setq epa-pinentry-mode 'loopback)
            (pinentry-start)))
#+end_src

=~/.gnupg/gpg-agent.conf=:

#+begin_src conf
pinentry-program /usr/bin/pinentry-gtk-2
allow-emacs-pinentry
allow-loopback-pinentry
#+end_src

** COMMENT Company

#+begin_src emacs-lisp
(use-package company
  :config
  (progn
    (add-hook 'after-init-hook 'global-company-mode)
    (setq company-idle-delay 1
          company-minimum-prefix-length 1
          company-selection-wrap-around t)
    (company-tng-configure-default)))
#+end_src

*** Company-posframe

For floaty stuff on suggestions.

#+begin_src emacs-lisp
(use-package company-posframe
  :config (company-posframe-mode 1))
#+end_src

** VTerm

A fully-fledged terminal emulator inside Emacs, using libvterm.

#+begin_src emacs-lisp
(use-package vterm
  :config (setq vterm-kill-buffer-on-exit t))
#+end_src

F7 key opens a new terminal buffer using VTerm.

#+begin_src emacs-lisp
(global-set-key [f7] 'vterm)
#+end_src

** Projectile

I like to use Projectile for managing my projects.

#+begin_src emacs-lisp
(use-package projectile
  :config (progn (projectile-mode +1)
                 (define-key projectile-mode-map
                   (kbd "C-c p") 'projectile-command-map)
                 (add-to-list
                  'projectile-globally-ignored-directories
                  "node_modules")))
#+end_src

*** Counsel-projectile

This is for Projectile usage with Ivy/Counsel.

#+begin_src emacs-lisp
(use-package counsel-projectile
  :after counsel
  :config (counsel-projectile-mode))
#+end_src

** All-the-icons

Yeah.

#+begin_src emacs-lisp
(use-package all-the-icons)
#+end_src

** Neotree

I also like Neotree on the F8 key.

#+begin_src emacs-lisp
(use-package all-the-icons)
(use-package neotree
;;  :defer nil
  :after projectile
  :requires all-the-icons
  :config (progn
            (global-set-key [f8] 'neotree-toggle)
            (setq neo-theme (if (or (display-graphic-p)
                                    (daemonp))
                                'icons
                              'arrow)
                  projectile-switch-project-action
                  'neotree-projectile-action)))
#+end_src

** COMMENT Treemacs

Treemacs is useful  because it works fine along with  LSP projects and
projectile.

#+begin_src emacs-lisp
(use-package treemacs
  :config (global-set-key [f8] 'treemacs))
#+end_src

** PDF Tools

I love PDF Tools to view PDF files.

After configuring it, I add a hook to fit the PDF's height to window
on startup, and also an auto-revert so that the PDF is reloaded after
being exported with AUCTeX or Org.

#+begin_src emacs-lisp
(use-package pdf-tools
;;  :defer nil
  :config (progn (pdf-tools-install)
                 ;;(add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
                 (add-hook 'pdf-view-mode-hook 'pdf-view-fit-height-to-window)
                 (add-hook 'pdf-view-mode-hook 'auto-revert-mode)))
#+end_src

** COMMENT Twittering

For Twitter support.

For more information see [[https://github.com/hayamiz/twittering-mode][the repository]].

#+begin_src emacs-lisp
(use-package twittering-mode
  :defer t
  :config (progn
            (setq twittering-icon-mode t
                  twittering-use-master-password t
                  twittering-initial-timeline-spec-string
                  '("(:home+@)"))))
#+end_src

** COMMENT Mastodon

I like to access Mastodon from Emacs. The link to my instance is stored
in a sensitive file.

#+begin_src emacs-lisp
(use-package mastodon
  :defer t
  :config (load-sensible-file "mastodon.el"))
#+end_src

** COMMENT Slack

Configuring Slack client.

Sensible stuff goes into =sensitive/slack.el=.

#+begin_src emacs-lisp
(use-package slack
  :defer t
  ;;:commands (slack-start)
  :init
  (setq slack-buffer-emojify      t
        slack-prefer-current-team t)
  :config (load-sensible-file "slack.el"))

(el-get-bundle yuya373/helm-slack)
(require 'helm-slack)
(global-set-key (kbd "C-c n s") #'helm-slack)
#+end_src

We use the =alert= package for notifications.

#+begin_src emacs-lisp
(use-package alert
  :after slack
  :commands (alert)
  :init (setq alert-default-style 'notifier))
#+end_src

** COMMENT WakaTime

I used to track my time with WakaTime. Gave me useful stats.
WakaTime uses an API key which is stored on a sensible file.

#+begin_src emacs-lisp
(use-package wakatime-mode
  :config (progn
            (load-sensible-file "wakatime.el")
            (global-wakatime-mode)))
#+end_src

** nov.el

Nov.el is good for reading EPUB files on Emacs.

Oh, and I also use Olivetti for centering and making it look good.

#+begin_src emacs-lisp
(use-package nov
;;  :defer nil
  :config (progn
            (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
            (add-hook 'nov-mode-hook
                      (lambda ()
                        (face-remap-add-relative 'variable-pitch
                                                 :family "Liberation Serif"
                                                 :height 1.2)))
            (add-hook 'nov-mode-hook (lambda () (olivetti-mode 1)))
            (setq nov-text-width 80)))
#+end_src

** COMMENT Mu4e

Mu4e is my favorite e-mail application. Fortunately, it can be
installed from my distribution's package manager.

Personal stuff should be in =sensitive/mail.el=.

#+begin_src emacs-lisp
(when (eq system-type 'gnu/linux)
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

  (require 'mu4e)
  (require 'smtpmail)

  (use-package mu4e-alert
    :config (progn
              (mu4e-alert-set-default-style 'libnotify)
              (add-hook 'after-init-hook
                        #'mu4e-alert-enable-notifications)
              (add-hook 'after-init-hook
                        #'mu4e-alert-enable-mode-line-display)))

  (setq mail-user-agent                   'mu4e-user-agent
        message-send-mail-function        'smtpmail-send-it
        message-kill-buffer-on-exit       t
        mu4e-change-filenames-when-moving t
        mu4e-view-show-images             t)

  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (load-sensible-file "mail.el"))
#+end_src

Let's make sure that mu4e messages wrap on column 80, just like Org. I
also like the usage of format=flowed.

#+begin_src emacs-lisp
(add-hook 'message-mode-hook 'auto-fill-mode)
(setq mu4e-compose-format-flowed t)
#+end_src

*** Extra configuration

I think it is interesting to describe other stuff I did here. I use
ProtonMail Bridge to help me manage my mail, and it is synced using
=mbsync=. To make it work, it is important to have some more
configuration.

**** COMMENT mbsync config

Here is my =.mbsyncrc= file.

#+begin_example
IMAPAccount protonmail
Host 127.0.0.1
Port PROTONMAIL-BRIDGE-GIVEN-IMAP-PORT
User mymail@example.com
PassCmd "gpg2 -q -d /path/to/authinfo.gpg | awk 'FNR == 1 {print $8}'"
SSLType NONE

IMAPStore remote
Account protonmail

MaildirStore local
Subfolders Verbatim
Path  /path/to/my/mail/box
Inbox /path/to/my/mail/box/INBOX/

Channel inbox
Master :remote:
Slave :local:
Patterns * !"Drafts" !"All Mail"
Create Slave
SyncState *
Sync All
Expunge Both

Group protonmail
Channel inbox
#+end_example

Oh, and Bridge can be a real bitch when handling your passwords, since
it requires =pass= or =gnome-keyring=; I use the latter. Also, make sure
you have DBus working (yeah, I know, I know. DBus sucks).

**** mu4e extra config

And here is how I defined my Mu4e context for ProtonMail. I have
omitted the sensitive parts, but this should give you a heads-up on
how to setup the =mu4e-contexts= variable.

#+begin_src emacs-lisp :tangle no
;; This code snippet SHOULD NOT BE TANGLED with the rest of the
;; configuration. Edit the sensitive/mail.el file if you need
;; to modify this code.

(setq mu4e-compose-signature "My Awesome Signature"
      mu4e-maildir-shortcuts '(("/INBOX"   . ?i)
                               ("/Sent"    . ?s)
                               ("/Drafts"  . ?d)
                               ("/Archive" . ?a)
                               ("/Trash"   . ?t)))

(setq mu4e-contexts
      `(,(make-mu4e-context
          :name "Protonmail"
          :vars
          `((mu4e-maildir          . ,(expand-file-name "/path/to/my/mail/box"))
            (user-mail-address     . "mymail@example.com")
            (user-full-name        . "My Name")
            (mu4e-attachment-dir   . "/path/to/attachment/download/dir")
            (mu4e-trash-folder     . "/Trash")
            (mu4e-refile-folder    . "/Archive")
            (mu4e-drafts-folder    . "/Drafts")
            (mu4e-sent-folder      . "/Sent")
            (mu4e-get-mail-command . "mbsync protonmail")
            (smtpmail-smtp-user    . "mymail@example.com")
            (smtpmail-stream-type  . starttls)
            (smtpmail-auth-credentials . "/path/to/authinfo.gpg")
            (smtpmail-smtp-server  . "127.0.0.1")
            (smtpmail-smtp-service . PROTONMAIL-BRIDGE-GIVEN-SMTP-PORT)))))
#+end_src

** COMMENT E-mail

*** Offlineimap config

For a different mail configuration, I'll be using ~notmuch~ and ~mu4e~.
First   things   first,  we   need   to   setup  ~offlineimap~.   Here's
an example for my =~/.offlineimaprc=.

#+begin_src conf :tangle no
[general]
accounts        = ufvjm
maxsyncaccounts = 1
pythonfile      = ~/.config/offlineimap/offlineimap.py

[Account ufvjm]
localrepository  = ufvjm-local
remoterepository = ufvjm-remote
quick            = 10
synclabels       = yes
postsynchook     = bash ~/.config/offlineimap/postsync.sh
		 
[Repository ufvjm-local]
type             = Maildir
localfolders     = ~/.mail
restoreatime     = no

[Repository ufvjm-remote]
type                 = IMAP
remotehost           = imap.gmail.com
remoteport           = 993
maxconnections       = 1
remoteuser           = lucas.vieira@ufvjm.edu.br
folderfilter         = lambda foldername: foldername not in ['[Gmail]/All Mail', '[Gmail]/Important']
ssl                  = yes
sslcacertfile        = /etc/ssl/certs/ca-certificates.crt
auth_mechanisms      = XOAUTH2
oauth2_client_id     = xxxxx
oauth2_client_secret = xxxxx
oauth2_request_url   = https://accounts.google.com/o/oauth2/token
oauth2_refresh_token = xxxxx
#+end_src

We will not add the config files for offlineimap.
First, the postsync  hook, which effectively tags  stuff using notmuch
and afew.

#+begin_src bash :tangle ~/.config/offlineimap/postsync.sh
#!/bin/bash
notmuch new
notmuch tag --input=$HOME/.config/offlineimap/notmuch
afew -t -n
#+end_src

The tagging rules themselves are described on their own file.

#+begin_src conf :tangle no
# Protonmail
-unread -new +trash folder:Trash
-unread -new +spam folder:Spam
+inbox folder:INBOX
-unread -new +lisphug folder:'Lispworks HUG'
-unread -new +9fans folder:9fans
-unread -new +faculdade folder:Faculdade

# SDF
#-unread -new +trash folder:sdf/INBOX.Trash
#+inbox folder:sdf/INBOX
#+end_src

And  the following  Python  2 script  helps us  to  scrape stuff  from
encrypted files.

#+begin_src python :tangle ~/.config/offlineimap/offlineimap.py
#!/usr/bin/env python2
from subprocess import check_output

def get_pass(file):
    return check_output("gpg2 -dq " + file, shell=True).strip("\n")
#+end_src

*** COMMENT Notmuch config

First  things  first, notmuch-emacs  was  installed  via Void  Linux's
XBPS. Let's add the install dir to the load path.

# TODO: Follow https://kkatsuyuki.github.io/notmuch-conf/

#+begin_src emacs-lisp
(when (eq system-type 'gnu/linux)
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/notmuch"))

(require 'notmuch)
(require 'smtpmail)
#+end_src

General configuration

#+begin_src emacs-lisp
(setq mail-user-agent               'message-user-agent
      message-kill-buffer-on-exit   t
      user-full-name                "Lucas S. Vieira"
      message-send-mail-function    #'smtpmail-send-it
      smtpmail-debug-info           t
      smtpmail-auth-credentials    (sensible-file "authinfo.gpg")
      message-kill-buffer-on-exit  t
      message-default-mail-headers "Cc: \nBcc: \n")
#+end_src

SDF configuration

#+begin_src emacs-lisp :tangle no
(setq smtpmail-smtp-server         "mx.sdf.org"
      user-mail-address            "alchemist@sdf.org"
      mail-directory               "~/.mail/sdf"
      message-auto-save-directory  "~/.mail/sdf/INBOX.Drafts"
      message-directory            "~/.mail/sdf")
#+end_src

Protonmail

#+begin_src emacs-lisp
(setq smtpmail-smtp-server         "localhost"
      user-mail-address            "lucasvieira@protonmail.com"
      mail-directory               "~/.mail/protonmail"
      message-auto-save-directory  "~/.mail/protonmail/Drafts"
      message-directory            "~/.mail/protonmail")
#+end_src

Configure offlineimap execution on Emacs

#+begin_src emacs-lisp
(use-package popwin)

(defun notmuch-exec-offlineimap ()
  "Execute offlineimap"
  (interactive)
  (set-process-sentinel
   (start-process-shell-command "offlineimap"
                                "*offlineimap*"
                                "offlineimap -o")
   '(lambda (process event)
      (notmuch-refresh-all-buffers)
      (let ((w (get-buffer-window "*offlineimap*")))
        (when w
          (with-selected-window w (recenter (window-end)))))))
  (popwin:display-buffer "*offlineimap*"))

(add-to-list 'popwin:special-display-config
             '("*offlineimap*"
               :dedicated t
               :position bottom
               :stick t
               :height 0.4
               :noselect t))
#+end_src

*** Mu4e config

Let's  start by  loading  mu4e  from our  load-path,  as  it was  also
installed via XBPS.

#+begin_src emacs-lisp
(when (eq system-type 'gnu/linux)
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e"))

(require 'mu4e)
(require 'smtpmail)
#+end_src

~mu4e-alert~ is a useful package to alert us for new mail.

#+begin_src emacs-lisp
(use-package mu4e-alert
  :config (progn
              (mu4e-alert-set-default-style 'libnotify)
              (add-hook 'after-init-hook
                        #'mu4e-alert-enable-notifications)
              (add-hook 'after-init-hook
                        #'mu4e-alert-enable-mode-line-display)))
#+end_src

We'll   also  use   our   default  sensible   ~authinfo.gpg~  for   SMTP
authentication.

#+begin_src emacs-lisp
(setq smtpmail-auth-credentials (sensible-file "authinfo.gpg"))
#+end_src

Let's also set some default preferences for mu4e.

#+begin_src emacs-lisp
(setq mail-user-agent                   'mu4e-user-agent
      message-send-mail-function        'smtpmail-send-it
      message-kill-buffer-on-exit       t
      mu4e-change-filenames-when-moving t
      mu4e-view-show-images             t
      mu4e-compose-format-flowed        t)
#+end_src

Let's add an ~auto-fill-mode~ to justify  our message bodies, and we can
also register imagemagick's types if said function is bound.

#+begin_src emacs-lisp
(add-hook 'message-mode-hook 'auto-fill-mode)

(when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))
#+end_src

Finally, our sensible stuff (such as the various contexts for mu4e may
be loaded from our ~mail.el~ sensible file.

#+begin_src emacs-lisp
(load-sensible-file "mail.el")
#+end_src

** Elfeed

Elfeed is an RSS/Atom feed reader. The location of the Elfeed file is
kept in a sensitive file.

#+begin_src emacs-lisp
(load-sensible-file "elfeed.el")
(use-package elfeed-org)
(use-package elfeed
  :defer t
  :requires elfeed-org
  :config (progn
            (elfeed-org)
;;            (setq-default elfeed-search-filter "@1-day-ago +unread ")
            (setq-default elfeed-search-filter "@1-day-ago ")
            ;; Move forward and backward
            (define-key elfeed-show-mode-map (kbd "C-<right>") 'elfeed-show-next)
            (define-key elfeed-show-mode-map (kbd "C-<left>") 'elfeed-show-prev)
            (define-key elfeed-show-mode-map (kbd "k") 'elfeed-show-next)
            (define-key elfeed-show-mode-map (kbd "j") 'elfeed-show-prev)))
#+end_src

Let's add some goodies.

#+begin_src emacs-lisp
(use-package elfeed-goodies
  :defer t
  :after elfeed
  :config (elfeed-goodies/setup))
#+end_src

** Magit

Magit is the awesome tool for Git usage.

#+begin_src emacs-lisp
(use-package magit
  :defer t)
#+end_src

*** Magit Forge

This tool  is very useful for  working with Git forges  such as Github
and Gitlab, providing support for pull requests and other stuff.

#+begin_src emacs-lisp
(use-package forge
  :defer t
  :after magit)
#+end_src

** Deadgrep

Please install ripgrep 0.8 or newer.

#+begin_src emacs-lisp
(use-package deadgrep
  :config (global-set-key (kbd "<f5>") #'deadgrep))
#+end_src

** COMMENT Ivy-Spotify

Controlling Spotify from Emacs/Dashboard (via dbus) uses an Ivy interface.

#+begin_src emacs-lisp
;;(use-package ivy-spotify) ; unavailable!
#+end_src

Then set the variables =counsel-spotify-client-id= and
=counsel-spotify-client-secret=.

If Emacs cannot access =dbus= (or Spotify is not recognized by =dbus=), it
may be interesting to have a script to invoke Emacs as follows (which
can be adapted into Spotify's):

#+begin_src bash :tangle no
#!/bin/bash

source $HOME/.dbus/session-bus/*
export DBUS_SESSION_BUS_ADDRESS
export DBUS_SESSION_BUS_PID
emacs --daemon &
#+end_src

** COMMENT Ivy-lobsters

Show Lobste.rs' top stories using Help.

#+begin_src emacs-lisp
(use-package ivy-lobsters
  :defer t)
#+end_src

** COMMENT w3m

For browsing inside Emacs, I usually use w3m.
#+begin_src emacs-lisp
(use-package w3m
  :defer t)
#+end_src

** COMMENT Dashboard

Dashboard is the default startup page for my Emacs configuration.

#+begin_src emacs-lisp
(use-package dashboard
  :after all-the-icons
  :commands (dashboard-setup-startup-hook
             dashboard-insert-startupify-lists)
  :init (dashboard-setup-startup-hook)
  :config (progn
            (setq initial-buffer-choice
                  (lambda ()
                    (dashboard-insert-startupify-lists)
                    (get-buffer "*dashboard*"))
                  dashboard-banner-logo-title "Welcome to GNU Emacs."
                  dashboard-startup-banner    'logo
                  dashboard-center-content    t
                  dashboard-set-heading-icons t
                  dashboard-set-file-icons    t
                  dashboard-set-navigator     t
                  dashboard-set-init-info     t
                  dashboard-set-navigator     t
                  
                    ;;; Items
                  dashboard-items '((agenda)
                                    ;;(recents . 5)
                                    ;;(bookmarks . 5)
                                    (projects  . 5)
                                    )

                    ;;; Footer
                  dashboard-footer-icon
                  (all-the-icons-octicon "dashboard"
                                         :height 1.1
                                         :v-adjust -0.05
                                         :face 'font-lock-keyword-face)
                  
                    ;;; Buttons
                  dashboard-navigator-buttons
                  ;; Line 1
                  `(((,(all-the-icons-faicon "cogs" :height 1.1 :v-adjust 0.0)
                      "" "Open config file"
                      (lambda (&rest _)
                        (find-file "~/.emacs.d/init.org")))
                     (,(all-the-icons-faicon "windows" :height 1.1 :v-adjust 0.0)
		      "" "Open StumpWM config file"
		      (lambda (&rest _)
			(find-file "~/.config/stumpwm/config")
			(slime-stumpwm-connect)))
                     (,(all-the-icons-faicon "envelope" :height 1.1 :v-adjust 0.0)
                      "" "Open Mu4e mail client"
                      (lambda (&rest _)
                        (mu4e)))
                     (,(all-the-icons-faicon "rss" :height 1.1 :v-adjust 0.0)
                      "" "Open Elfeed RSS client"
                      (lambda (&rest _)
                        (elfeed))))
                    ;; Line 2
                    ((,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
                     "" "Go to GitHub profile"
                     (lambda (&rest _)
                       (browse-url "https://github.com/luksamuk")))
                     (,(all-the-icons-faicon "twitter" :height 1.1 :v-adjust 0.0)
                      "" "Open Twittering"
                      (lambda (&rest _)
                        (twit)))
                     (,(all-the-icons-fileicon "telegram" :height 1.1 :v-adjust 0.0)
                      "" "Open Telega"
                      (lambda (&rest _)
                        (telega nil))))
                    ;; Line 3
                    (
                     ;; (,(all-the-icons-faicon "firefox" :height 1.1 :v-adjust 0.0)
                     ;;  "" "Open Firefox"
                     ;;  (lambda (&rest _)
                     ;;    (with-exwm
                     ;;     (my-exec-async "firefox"))))
                     (,(all-the-icons-faicon "refresh" :height 1.1 :v-adjust 0.0)
                      "" "Refresh Dashboard"
                      (lambda (&rest _)
                        (dashboard-refresh-buffer))))))))
#+end_src

#+RESULTS:
: t

#+begin_src emacs-lisp :tangle no
(add-hook 'emacs-startup-hook
          (lambda ()
            (dashboard-setup-startup-hook)
            (dashboard-insert-startupify-lists)))
#+end_src

** COMMENT StumpWM

#+begin_src emacs-lisp
(use-package stumpwm-mode)
#+end_src

** COMMENT Database GUI

Use =M-x edbi:open-db-viewer= to open a DB connection.

For MySQL for example, you might want to use a data source such as

~dbi:mysql:host=localhost;dbname=my-db;charset=utf8mb4~

#+begin_src emacs-lisp
(use-package edbi)
#+end_src

** COMMENT Paradox

#+begin_src emacs-lisp
(use-package paradox
  :config (paradox-enable))
#+end_src

** COMMENT Telega

Telega is a telegram client for Emacs. See more info at [[https://github.com/zevlg/telega.el][its
repository]].

#+begin_src emacs-lisp
(use-package telega
  :defer t
  :config (progn
            (load (expand-file-name (concat user-emacs-directory "elisp/telega-alert.el")))
            (telega-alert-mode 1)
            (telega-notifications-mode 1) ; DBus notifications
            (setq telega-use-images t
                  telega-sticker-size '(16 . 24)
                  telega-animation-height 16)
            (add-hook 'telega-chat-mode-hook
		      (lambda ()
			(set (make-local-variable 'company-backends)
			     (append '(telega-company-emoji
				       telega-company-username
				       telega-company-hashtag)
				     (when (telega-chat-bot-p telega-chatbuf--chat)
				       '(telega-company-botcmd))))
			(company-mode 1)))
	    (add-hook 'telega-chat-mode-hook
		      (lambda () (setq line-spacing 0)))))
#+end_src

Notifications using ~alert.el~ depend on  a contrib file which I located
at ~elisp/~ folder.

** COMMENT Mingus

Mingus controls MPD.

#+begin_src emacs-lisp
(use-package mingus
  :config (setq mingus-mpd-port 6601))
#+end_src

** COMMENT EMMS

Here we configure EMMS by using the MPV backend.

#+begin_src emacs-lisp
(use-package emms
  :defer t
  :config
  (progn (require 'emms-setup)
         (require 'emms-player-mpv)
         (emms-all)
         (setq emms-seek-seconds           5
               emms-player-list            '(emms-player-mpv
                                             emms-player-mpd)
               emms-info-functions         '(emms-info-cueinfo
                                             emms-info-ogginfo
                                             emms-info-mp3info
                                             emms-info-metaflac
                                             emms-info-exiftool
                                             emms-info-mpd)
               emms-browser-covers         'emms-browser-cache-thumbnail
               emms-player-mpd-server-name "localhost"
               emms-player-mpd-server-port "6601"
               emms-player-mpd-music-directory "/path/to/music"
               emms-browser-covers 'emms-browser-cache-thumbnail-async)
         (add-to-list 'emms-player-mpv-parameters "--no-audio-display"))
  :bind
  ("<XF86AudioPrev>" . emms-previous)
  ("<XF86AudioNext>" . emms-next)
  ("<XF86AudioPlay>" . emms-pause)
  ("<XF86AudioStop>" . emms-stop))

(use-package ivy-emms
  :bind (("<C-f5>" . ivy-emms)))
#+end_src

** MPC

Yeah, yet another MPD interface.

#+begin_src emacs-lisp
(setq mpc-host "localhost:6601"
      mpc-browser-tags '(AlbumArtist Album)
      mpc-song-formats "%20{AlbumArtist} :: %25{Title} :: %-5{Time}")
#+end_src

** Writeroom Mode

For distraction-free editing.

#+begin_src emacs-lisp
(use-package writeroom-mode
  :defer t)
#+end_src

** COMMENT EXWM
:PROPERTIES:
:header-args:emacs-lisp: :tangle yes
:END:

Remove the above property to use EXWM.

*** Config start

#+begin_src emacs-lisp
(use-package exwm)
(require 'exwm-config)
(require 'exwm)
(require 'exwm-randr)
#+end_src

Configuration for EXWM.

First let's start with monitor stuff.

#+begin_src emacs-lisp
(defun enable-multi-monitor ()
  (setq exwm-randr-workspace-output-plist '(1 "eDP1" 2 "HDMI1"))
  (when (string-match-p (regexp-quote "HDMI1 connected")
			(shell-command-to-string "xrandr"))
    (start-process-shell-command
     "xrandr"
     nil
     "xrandr --output eDP1 --primary --mode 1366x768 --pos 0x0 --rotate normal --output DP1 --off --output HDMI1 --mode 1360x768 --pos 1366x0 --rotate normal --output HDMI2 --off --output VIRTUAL1 --off")
    (exwm-randr-enable)))

(enable-multi-monitor)
#+end_src

Now, effectively start EXWM.

#+begin_src emacs-lisp
(exwm-config-default)
#+end_src

Require packages and add =ido= at start.

#+begin_src emacs-lisp
(ido-mode 0)
#+end_src

Also enable time on modeline.

#+begin_src emacs-lisp
(setq display-time-default-load-average nil
      display-time-day-and-date t
       display-time-24hr-format  t)
(display-time-mode t)
#+end_src

Finally, start the Emacs server.

#+begin_src emacs-lisp
(server-start)
#+end_src

*** Workspaces

Initial number of buffers is 9, which works fine for me on bspwm as
well.

#+begin_src emacs-lisp
(setq exwm-workspace-number 9)
#+end_src

*** Buffer naming

Buffers created in EXWM should be named after their X window class
name or title. Java applications and GIMP use window titles due to
multiple windows.

#+begin_src emacs-lisp
(add-hook 'exwm-update-class-hook
          (lambda ()
            (unless (or (string-prefix-p "sun-awt-x11-" exwm-instance-name)
                        (string= "gimp" exwm-instance-name))
                (exwm-workspace-rename-buffer exwm-class-name))))
 
(add-hook 'exwm-update-title-hook
           (lambda ()
             (when (or (not exwm-instance-name)
                       (string-prefix-p "sun-awt-x11-" exwm-instance-name)
                       (string= "gimp" exwm-instance-name))
                 (exwm-workspace-rename-buffer exwm-title))))
#+end_src

*** Utilities

#+begin_src emacs-lisp
(defun my-exec-async (command)
  (start-process-shell-command command nil (concat "cd ~; " command)))
#+end_src

#+begin_src emacs-lisp
(defun my-exec-get-output (command)
  (interactive)
  (string-trim (shell-command-to-string (concat "cd ~; " command))))
#+end_src

#+begin_src emacs-lisp
(cl-labels ((workspace-switch (transform)
             (let ((ws-num (% (funcall transform
                                       exwm-workspace-current-index)
                              exwm-workspace-number)))
               (exwm-workspace-switch
                (if (< ws-num 0)
                    (1- exwm-workspace-number)
                  ws-num)))))
  (defun my-exwm-next-workspace ()
    (interactive)
    (workspace-switch #'1+))
   
  (defun my-exwm-prev-workspace ()
    (interactive)
    (workspace-switch #'1-)))
#+end_src

#+begin_src emacs-lisp
(defun my-control-volume (action)
  (when (member action '(:up :down :toggle))
    ;;(my-exec-async "dzvol -bg \"#14171e\"")
    (case action
      (:up     (my-exec-async "ponymix increase 2"))
      (:down   (my-exec-async "ponymix decrease 2"))
      (:toggle (my-exec-async "ponymix toggle")))))
#+end_src

#+begin_src emacs-lisp
(defun my-print (current-window)
  (if current-window
      (my-exec-async "scrot -u")
    (my-exec-async "scrot"))
  (message "%s" (propertize "Screen printed" 'face '(:foreground "lightblue"))))
#+end_src

#+begin_src emacs-lisp
(defun my-control-brightness (action)
  (when (member action '(:up :down))
    (case action
      (:up   (my-exec-async "xbacklight -inc 2"))
      (:down (my-exec-async "xbacklight -dec 2"))))
  (message "Backlight: %0.2f%%"
           (string-to-number (my-exec-get-output "xbacklight"))))
#+end_src

*** Global keys

Here are some examples of keybindings.

#+begin_src emacs-lisp
(setq exwm-input-global-keys
      ;; switch to line-mode, exit fullscreen, refresh etc
      `(([?\s-r] . exwm-reset)
        ;; Switch workspace
        ([?\s-w] . exwm-workspace-switch) ; switch workspace
        ;; Launch command without output. Either use s-& or s-SPC.
        ;; With output is M-&.
        ([?\s-&] . (lambda (command)
                     (interactive (list (read-shell-command "$ ")))
                     (my-exec-async command)))
        (,(kbd "s-SPC") . (lambda (command)
                            (interactive
                             (list (read-shell-command "$ ")))
                            (my-exec-async command)))
        ;; Previous/Next workspace
        ([?\s-a] . my-exwm-prev-workspace)
        ([?\s-d] . my-exwm-next-workspace)
        ([?\s-s] . exwm-floating-toggle-floating)
        ([?\s-e] . (lambda (command)
                     (interactive
                      (list (my-exec-async "alacritty")))))
        (,(kbd "s-<return>")
         . (lambda (command)
             (interactive
              (list (my-exec-async "alacritty")))))
        ;; Audio
        (,(kbd "<XF86AudioRaiseVolume>")
         . (lambda ()
             (interactive)
             (my-control-volume :up)))
        (,(kbd "<XF86AudioLowerVolume>")
         . (lambda ()
             (interactive)
             (my-control-volume :down)))
        (,(kbd "<XF86AudioMute>")
         . (lambda ()
             (interactive)
             (my-control-volume :toggle)))
        ;; Print screen
        (,(kbd "<print>")
         . (lambda ()
             (interactive)
             (my-print nil)))
        (,(kbd "s-<print>")
         . (lambda ()
             (interactive)
             (my-print t)))
        (,(kbd "<XF86MonBrightnessUp>")
         . (lambda ()
             (interactive)
             (my-control-brightness :up)))
        (,(kbd "<XF86MonBrightnessDown>")
         . (lambda ()
             (interactive)
             (my-control-brightness :down)))
        ))
#+end_src

To refresh, use:

#+begin_src emacs-lisp :tangle no :eval no
(csetq exwm-input-global-keys exwm-input-global-keys)
#+end_src

*** System Tray

#+begin_src emacs-lisp
(require 'exwm-systemtray)
(exwm-systemtray-enable)
#+end_src

*** Execute stuff on startup

Title says all! Can't live without my stuff.

#+begin_src emacs-lisp
(add-hook 'exwm-init-hook
          (lambda ()
            (mapc #'my-exec-async
                  '("xrdb -load ~/.xresources"
                    "picom --experimental-backends"
                    "hsetroot -full ~/pictures/wallpaper/lain09.png"
                    "pa-applet"
                    "xsetroot -cursor-name left_ptr"
                    "fbxkb"
                    "mpd"
                    "mpdscribble"
                    "xset s off"
                    "xset -dpms"
                    "dropbox start"
                    ))))
#+end_src

I also want to switch to workspace 0 and use the dashboard buffer.

#+begin_src emacs-lisp
(add-hook 'exwm-init-hook
          (lambda ()
            (exwm-workspace-switch 0)))
#+end_src

** COMMENT Vimish-fold

~vimish-fold~ is a tool for performing text folding like Vim does.

I'll binding it to ~C-c v f~ to fold and ~C-c v v~ to unfold.

#+begin_src emacs-lisp
(use-package vimish-fold
  :defer t
  :config (progn
            (global-set-key (kbd "C-c v f") #'vimish-fold)
            (global-set-key (kbd "C-c v v") #'vimish-fold-delete)
            (vimish-fold-global-mode 1)))
#+end_src

** Fancy-battery

To show battery level on modeline.

#+begin_src emacs-lisp
(use-package fancy-battery
  :config (progn
            (add-hook 'after-init-hook #'fancy-battery-mode)
            (setq fancy-battery-show-percentage t)))
#+end_src

** COMMENT Guru-mode

I feel  I need  training wheels.  So let's  make Emacs  complain about
arrow keys. However, we only want it to complain a little bit.

#+begin_src emacs-lisp
(use-package guru-mode
  :config (progn (guru-global-mode 1)
                 (setq guru-warn-only t)))
#+end_src

** COMMENT Circe

https://github.com/jorgenschaefer/circe

** COMMENT Wttr.in

#+begin_src emacs-lisp
(use-package wttrin
  :config (load-sensible-file "wttrin.el"))
#+end_src

** Display fill column indicator

Only works with Emacs 27 and up.

#+begin_src emacs-lisp
(require 'display-fill-column-indicator)
(setq-default fill-column 80)
(add-hook 'prog-mode-hook 'display-fill-column-indicator-mode)
#+end_src

** COMMENT Copilot integration

Don't forget to ~M-x copilot-login~! Also use ~M-x copilot-diagnose~.

#+begin_src emacs-lisp :tangle no
(use-package editorconfig)
(el-get-bundle zerolfx/copilot.el)
(require 'copilot)

(setq copilot-allowed-modes
      '(rust-mode emacs-lisp-mode lisp-mode))

(defun my-tab-completion ()
  (interactive)
  (or (copilot-accept-completion)
      (company-indent-or-complete-common nil)))

(with-eval-after-load 'company
  ; disable inline previews
  (delq 'company-preview-if-just-one-frontend company-frontends)
  ; enable tab completion
  (define-key company-mode-map (kbd "<tab>") 'my-tab-completion)
  (define-key company-mode-map (kbd "TAB") 'my-tab-completion)
  (define-key company-active-map (kbd "<tab>") 'my-tab-completion)
  (define-key company-active-map (kbd "TAB") 'my-tab-completion))

; provide completion when typing
(add-hook 'post-command-hook
          (lambda ()
            (copilot-clear-overlay)
            (when (member major-mode copilot-allowed-modes)
              (copilot-complete))))
#+end_src

** Kubernetes

#+begin_src emacs-lisp
(use-package kubernetes
  :config (fset 'k8s 'kubernetes-overview))
#+end_src

** Restclient.el

#+begin_src emacs-lisp
(use-package restclient)
#+end_src

** Terraform

Add support for Terraform.

#+begin_src emacs-lisp
(use-package terraform-mode)
#+end_src

** Elcord

#+begin_src emacs-lisp :tangle no
(use-package elcord
  :config (elcord-mode))
#+end_src

* COMMENT Decrease GC Threshold

Returns GC threshold to normal to make GC pauses faster again.

#+begin_src emacs-lisp
(setq gc-cons-threshold (* 8 1000 1000)) ; 800 KiB
#+end_src

* Window shortcuts for terminal

These  shortcuts  put  shrinking/enlarging  windows vertically  on  default  C-x
brackets, and horizontal shortcuts on C-x M-brackets.

- ~C-x }~: Enlarge window
- ~C-x {~: Shrink window
- ~C-x M-}~: Enlarge window horizontally
- ~C-x M-{~: Shring window horizontally

#+begin_src emacs-lisp
(global-set-key (kbd "C-x }") 'enlarge-window)
(global-set-key (kbd "C-x {") 'shrink-window)
(global-set-key (kbd "C-x M-}") 'enlarge-window-horizontally)
(global-set-key (kbd "C-x M-{") 'shrink-window-horizontally)
#+end_src
