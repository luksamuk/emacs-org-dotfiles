#+TITLE:    Alchemist's Emacs Configuration
#+AUTHOR:   Lucas Vieira
#+BABEL:    :cache yes
#+PROPERTY: header-args :tangle yes
#+STARTUP:  content

* Introduction

Welcome to my Emacs configuration. To use it, put this file, the =elisp=
and =sensitive= folders under your =.emacs.d= directory.

** Usage

It is advised to change and/or encrypt the files under =sensitive= to
your taste (or just remove their related configuration below).

After doing all of that, copy the contents described under the
[[#sec:bootstrapping][Bootstrapping]] to an =init.el= file under =.emacs.d=, and open
Emacs. This will tangle and compile this file, replacing the
bootstrapping =init.el=.

** Dependencies

This configuration runs file on Emacs 26.2, but is also expected to
run on Emacs 24. Package compatibility is not checked.

As for external binaries, here is a list. Notice that some may not be
vital, and can be replaced/removed.

- =Dina= (default font)
- =Firefox= (default browser)
# - =cmake= and =rtags= (for CMake IDE)
- =gforth= (for Forth evaluation)
- =go= and =godoctor= (for Go Flycheck support)
- =ghc= and =stack= (for Haskell Intero IDE)
- =SLIME=, installed via =Roswell= (for Common Lisp)
- =Qlot=, installed via =Roswell= (for Common Lisp also)
- =Chez Scheme= (for Scheme)
- =purs= and =npm= (for PureScript)
- =rustup=, =rustc=, =cargo= and =racer= (for Rust)
- =TexLive= and =rubber= (for AUCTeX, Org LaTeX export, LaTeX, etc)
- =zsh= (for Ansi-Term)
- =wakatime= (for WakaTime)
- =unzip= and =libxml2= support on Emacs (for nov.el)
- =mu4e=, =isync/mbsync=, =gpg2=, =awk= (for Mu4e)
- =git= (for Magit)
- =Spotify=, =dbus= (for Spotify)
- =w3m= (for w3m browser)
- =clojure= and =leiningen= (for Clojure)
- =shen= (Common Lisp build, for Shen)
- =GNU APL= (for APL)
- =GNU FreeFont=, specially =FreeMono= (for GNU APL)
- =APL385 Unicode= font (for GNU and Dyalog APL; get at Dyalog page)
- =Tern.js= (JavaScript, Node.js support; can be installed with =npm=)
- =Perl= (for =edbi=)
- =Python 3=, =ipython=, =pip= for Python stuff

** Screenshots

Here are some screenshots of how it will look after the configuration.
Notice that transparency is due to a [[https://github.com/tryone144/compton][special fork of compton]].

#+ATTR_ORG: :width 50% :height 50%
[[./screenshots/screen01.png]]

#+ATTR_ORG: :width 50% :height 50%
[[./screenshots/screen02.png]]

* Preparation
** Bootstrapping
:PROPERTIES:
:CUSTOM_ID: sec:bootstrapping
:END:

This init file is heavily inspired by [[https://github.com/freetonik/emacs-dotfiles][freetonik]]'s.

Tangle and compile this file on save.

#+begin_src emacs-lisp
  ;;;; -*- lexical-binding: t -*-

  ;;;; Initialization

  (defun tangle-init ()
    "If the current buffer is 'init.org' the code-blocks are
    tangled, and the tangled file is compiled."
    (when (equal (buffer-file-name)
		 (expand-file-name (concat user-emacs-directory "init.org")))
      ;; Avoid running hooks when tangling.
      (let ((prog-mode-hook nil))
	(org-babel-tangle)
	(byte-compile-file (concat user-emacs-directory "init.el")))))

  (add-hook 'after-save-hook 'tangle-init)
#+end_src

This block removes the /"functions might not be defined at runtime"/
warnings. However it never showed up on my configuration, so I'll just
leave it commented.

#+begin_src emacs-lisp
  ;;(eval-when-compile
  ;;  (setq use-package-expand-minimally byte-compile-current-file))
#+end_src

** Packaging

Prepare packages.
I don't use =melpa-stable=, only because it lacks certain packages.
Also, somehow, =elpa= is inaccessible over HTTPS.

#+begin_src emacs-lisp
(setq package-archives '(("gnu" . "http://elpa.gnu.org/packages/")
			 ("marmalade" . "https://marmalade-repo.org/packages/")
			 ;;("melpa-stable" . "https://stable.melpa.org/packages/")
			 ("melpa" . "https://melpa.org/packages/")
			 ("org" . "https://orgmode.org/elpa/")))

(package-initialize)
#+end_src

Now we install =use-package=. All subsequent packages are managed by
it.

#+begin_src emacs-lisp
(unless (package-installed-p 'use-package)
  (package-refresh-contents)
  (package-install 'use-package))

(eval-when-compile (require 'use-package))

(setq use-package-always-ensure t)
#+end_src

** Custom

The custom file is a thing I never plan to touch.
Let's move it out of the way.

#+begin_src emacs-lisp
  (setq custom-file (expand-file-name (concat user-emacs-directory "sensitive/custom.el")))
  (load custom-file)
#+end_src

* Appearance

** Fonts

There are many fonts I usually choose. I just uncomment as needed.

#+begin_src emacs-lisp
;;(defconst my-default-font "-*-fixed-medium-r-normal-*-15-*-*-*-*-*-*-*")
;;(defconst my-default-font "-misc-fixed-*-*-*-*-12-*-*-*-*-*-*-*")
;;(defconst my-default-font "-b&h-lucidatypewriter-medium-r-normal-sans-14-*-*-*-*-*-iso8859-1")
;;(defconst my-default-font "FantasqueSansMono Nerd Font-10")
;;(defconst my-default-font "Monoid-8.5")
;;(defconst my-default-font "APL385 Unicode-8")
;;(defconst my-default-font "Fixed-10")
;;(defconst my-default-font "Dina-10")
;;(defconst my-default-font "FreeMono-10")
;;(defconst my-default-font "Iosevka-9")
;;(defconst my-default-font "Terminus-10")
(defconst my-default-font "Hack-10")
#+end_src

** Visual

We create a frame a-list which is applied, so that we have customizations
set at standalone or daemonized Emacs.

#+begin_src emacs-lisp
(defconst my-frame-alist
  `((font                 . ,my-default-font)
    (scroll-bar           . -1)
    (height               . 50)
    (width                . 90)
    (cursor-type          . bar)
    (alpha                . 95)
    (tty-color-mode       . -1)
    (vertical-scroll-bars . nil)))
(setq default-frame-alist my-frame-alist)
#+end_src

I use kaolin-bubblegum as my default theme.

#+begin_src emacs-lisp
(use-package kaolin-themes
  :config (load-theme 'kaolin-bubblegum t))
#+end_src

I'll also add some extra stuff for setting up themes.

#+begin_src emacs-lisp
(defun theme-dark ()
  "Sets the dark theme"
  (interactive)
  (load-theme 'kaolin-bubblegum t))

(defun theme-light ()
  "Sets the light theme"
  (interactive)
  (load-theme 'kaolin-light t))
#+end_src

There are also some general rules I set up manually.

#+begin_src emacs-lisp
(setq inhibit-startup-screen        t
      inhibit-splash-screen         t
      show-paren-mode               1
      show-paren-delay              0
      scroll-bar-mode               -1
      browser-url-browse-function   'browse-url-firefox
      linum-format                  "%5d"
      tab-width                     4
      ;; Mouse
      transentient-mark-mode        t
      mouse-wheel-follow-mouse      t
      scroll-step                   1
      scroll-conservatively         101
      mouse-wheel-scroll-amount     '(1)
      mouse-wheel-progressive-speed nil)
(menu-bar-mode -99)
(tool-bar-mode -1)
#+end_src

=linum-mode= is too heavy, so we use =display-line-numbers-mode= instead.

#+begin_src emacs-lisp
(add-hook 'prog-mode-hook 'display-line-numbers-mode)
#+end_src

** Keybindings

Increasing/decreasing text is useful on presentations.

#+begin_src emacs-lisp
  (global-set-key (kbd "C-+") #'text-scale-increase)
  (global-set-key (kbd "C--") #'text-scale-decrease)
#+end_src

We also set some bindings for mouse scrolling. They work with the
mouse variables which we've already set before.

#+begin_src emacs-lisp
  (global-set-key (kbd "<mouse-4>")   'scroll-down-line)
  (global-set-key (kbd "<mouse-5>")   'scroll-up-line)
  (global-set-key (kbd "<C-mouse-4>") 'scroll-down-command)
  (global-set-key (kbd "<C-mouse-5>") 'scroll-up-command)

  (xterm-mouse-mode)
#+end_src

** Autocompletion

Let's set up autocompletions.

#+begin_src emacs-lisp
(setq tab-always-indent 'complete)
(add-to-list 'completion-styles 'initials t)
#+end_src

** Modeline

I use =telephone-line= for that.

(Unfortunately, Org Journal doesn't work fine with it... I still need
to mitigate the problem, but I'll just disable it for now)

#+begin_src emacs-lisp
  (use-package telephone-line
    :config (progn
	      (setq telephone-line-primary-left-separator    'telephone-line-cubed-left
		    telephone-line-secondary-left-separator  'telephone-line-cubed-hollow-left
		    telephone-line-primary-right-separator   'telephone-line-cubed-right
		    telephone-line-secondary-right-separator 'telephone-line-cubed-hollow-right
		    telephone-line-height                    24
		    telephone-line-evil-use-short-tag        t))
    (telephone-line-mode 1))
#+end_src

** Ivy

I prefer to use Ivy instead of Helm or Emacs' default minibuffer
thing.

#+begin_src emacs-lisp
(use-package counsel)

(use-package ivy
  :config (progn
            (ivy-mode 1)
            (setq ivy-use-virtual-buffers  t
                  ivy-count-format         "(%d/%d) ")))
#+end_src

*** Ivy-rich

It is also interesting to use =ivy-rich= for a... richer... Ivy
experience.

#+begin_src emacs-lisp
(use-package ivy-rich
  :config (progn
            (ivy-rich-mode 1)
            (setcdr (assq t ivy-format-functions-alist)
                    #'ivy-format-function-line)
            ;; Function for buffer icons
            (defun ivy-rich-switch-buffer-icon (candidate)
              (with-current-buffer
                  (get-buffer candidate)
                (let ((icon (all-the-icons-icon-for-mode major-mode)))
                  (if (symbolp icon)
                      (all-the-icons-icon-for-mode 'fundamental-mode)
                    icon))))
            (setq ivy-rich--display-transformers-list
                  '(ivy-switch-buffer
                    (:columns
                     (;; Buffer icon
                      (ivy-rich-switch-buffer-icon (:width 2))
                      ;; return the candidate itself
                      (ivy-rich-candidate (:width 30))
                      ;; return the buffer size
                      (ivy-rich-switch-buffer-size (:width 7))
                      ;; return the buffer indicators
                      (ivy-rich-switch-buffer-indicators
                       (:width 4 :face error :align right))
                      ;; return the major mode info
                      (ivy-rich-switch-buffer-major-mode
                       (:width 12 :face warning))
                      ;; return project name using `projectile'
                      (ivy-rich-switch-buffer-project
                       (:width 15 :face success))
                      ;; return file path relative to project root
                      ;; or `default-directory' if project is nil
                      (ivy-rich-switch-buffer-path
                       (:width (lambda (x)
                                 (ivy-rich-switch-buffer-shorten-path
                                  x
                                  (ivy-rich-minibuffer-width 0.3))))))
                     :predicate
                     (lambda (cand) (get-buffer cand)))
                    counsel-M-x
                    ;; (:columns
                    ;;  ;; the original transformer
                    ;;  ((counsel-M-x-transformer (:width 40))
                    ;;   (ivy-rich-counsel-function-docstring
                    ;;    ;; return the docstring of the command
                    ;;    (:face font-lock-doc-face))))
                    ;; Two-column mode
                    (:columns
                     ((counsel-M-x-transformer (:width 40))
                      (ivy-rich-counsel-function-docstring
                       (:face font-lock-doc-face))))
                    counsel-describe-function
                    (:columns
                     ;; the original transformer
                     ((counsel-describe-function-transformer (:width 40))
                      ;; return the docstring of the function
                      (ivy-rich-counsel-function-docstring
                       (:face font-lock-doc-face))))
                    counsel-describe-variable
                    (:columns
                     ;; the original transformer
                     ((counsel-describe-variable-transformer (:width 40))
                      (ivy-rich-counsel-variable-docstring
                       ;; return the docstring of the variable
                       (:face font-lock-doc-face))))
                    counsel-recentf
                    (:columns
                     ;; return the candidate itself
                     ((ivy-rich-candidate (:width 0.8))
                      (ivy-rich-file-last-modified-time
                       ;; return the last modified time of the file
                       (:face font-lock-comment-face))))))))
#+end_src

*** Ivy-posframe

Floaty stuff is floaty.

#+begin_src emacs-lisp
(use-package ivy-posframe
  :config (progn
            (setq ivy-posframe-display-functions-alist
                  '((t . ivy-posframe-display-at-frame-top-center)))
            (ivy-posframe-mode 1)))
#+end_src

* Language Configurations

Now we create configurations for programming languages.

** General
Indent-guide is useful for showing guide lines on code.

#+begin_src emacs-lisp
;; (use-package indent-guide
;;   :config (indent-guide-global-mode))
#+end_src

This should give us nice, highlighted numbers across all programming
languages.

#+begin_src emacs-lisp
(use-package highlight-numbers
  :config (add-hook 'prog-mode-hook 'highlight-numbers-mode))
#+end_src

Let's also install and/or configure globally-needed packages, such as
Flycheck and Semantic.

#+begin_src emacs-lisp
(use-package flycheck)
(require 'semantic)

;; (global-semanticdb-minor-mode        1)
;; (global-semantic-idle-scheduler-mode 1)
;; (global-semantic-stickyfunc-mode     0)

;; (semantic-mode 1)
#+end_src

Org and Mu4e's compose buffer use =auto-fill-mode=. I like to wrap on
column 80.

#+begin_src emacs-lisp
(setq fill-column 80)
#+end_src

** Org
*** General
Org mode already comes with Emacs, but it is important that we make
sure we have the latest version installed.

#+begin_src emacs-lisp
(use-package org :ensure org-plus-contrib)
#+end_src

As a general note, I just disable the prompts for code evaluation on
Org. You might want to remove this on your end.

#+begin_src emacs-lisp
(setq-default org-confirm-babel-evaluate nil)
#+end_src

We also need to make sure our HTML exported files open with the
browser and whatever.

#+begin_src emacs-lisp
(setq org-file-apps
      '((auto-mode . emacs)
        ("\\.mm\\'" . default)
        ("\\.x?html?\\'" . "/usr/bin/firefox %s")
        ("\\.pdf\\'" . "/usr/bin/zathura %s")))
#+end_src

*** Agenda

Prepare Portuguese-BR translations for some things, plus some custom
commands.

#+begin_src emacs-lisp
  (require 'org-agenda)
  (setq org-agenda-include-diary t
	calendar-week-start-day 0
	calendar-day-name-array ["Domingo" "Segunda" "Terça" "Quarta"
				 "Quinta" "Sexta" "Sábado"]
	calendar-month-name-array ["Janeiro" "Fevereiro" "Março" "Abril"
				   "Maio" "Junho" "Julho" "Agosto"
				   "Setembro" "Outubro" "Novembro" "Dezembro"])


  (add-to-list 'org-agenda-custom-commands
	       '("Y" "Agenda anual de aniversários e feriados" agenda "Visão Anual"
		 ((org-agenda-span 365)
		  (org-agenda-filter-by-category 'Aniversário)
		  (org-agenda-time-grid nil))))
  (add-to-list 'org-agenda-custom-commands
	       '("1" "Agenda mensal" agenda "Visão Mensal"
		 ((org-agenda-span 31)
		  (org-agenda-time-grid nil))))
  (add-to-list 'org-agenda-custom-commands
	       '("7" "Agenda dos próximos sete dias" agenda "Visão de Sete Dias"
		 ((org-agenda-span 7)
		  (org-agenda-time-grid nil))))
#+end_src

There are also some Brazillian holidays we can use.

#+begin_src emacs-lisp
  (load (expand-file-name (concat user-emacs-directory "elisp/brazil-holidays.el")))
  (setq calendar-holidays holiday-brazil-all)
#+end_src

As for my agenda itself, it is managed through the variable org-agenda-files, which
is defined in a sensitive file.

#+begin_src emacs-lisp
  (load (expand-file-name (concat user-emacs-directory "sensitive/agenda.el")))
#+end_src

Since I sync my agenda files across the web, it is very important that
Org files have auto-revert turned on by default.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook 'auto-revert-mode)
#+end_src

*** Appearance

Let's make sure our Org mode indents and wraps around the 80th column
by using Visual Line Mode. Oh, and we also enable cute bullets.

#+begin_src emacs-lisp
(add-hook 'org-mode-hook #'toggle-word-wrap)
(add-hook 'org-mode-hook #'org-indent-mode)
(add-hook 'org-mode-hook #'turn-on-visual-line-mode)

(use-package org-bullets
  :config (add-hook 'org-mode-hook #'org-bullets-mode))
#+end_src

# Let's enforce the 80-column rule with an indicator.

#+begin_src emacs-lisp
(use-package fill-column-indicator
  :config (progn
            (add-hook 'org-mode-hook
                      (lambda ()
                        (setq fci-rule-width 1)
                        (setq fci-rule-color "darkblue")))
            (add-hook 'org-mode-hook 'turn-on-auto-fill)))
#+end_src

Another option is to use =adaptive-wrap=, but I'll leave it off for now.

#+begin_src emacs-lisp
;; (use-package adaptive-wrap)
#+end_src

Other nice features are: hiding emphasis markers, prevent editing
source blocks indentation, make tab acts natively, fontify, ensure
org-babel checks before evaluation, support shift select.

#+begin_src emacs-lisp
(setq org-hide-emphasis-markers        t
      org-edit-src-content-indentation 0
      org-src-tab-acts-natively        t
      org-src-fontify-natively         t
      org-src-preserve-indentation     t
      org-confirm-babel-evaluate       t
      org-support-shift-select         'always)
#+end_src

*** Alert

Org-alert uses libnotify to create notifications for the calendar.

#+begin_src emacs-lisp
  (use-package org-alert
    :config (progn
	      (setq alert-default-style          'libnotify
		    org-alert-notification-title "*org-mode*"
		    org-alert-interval           21600)
	      (org-alert-enable)))
#+end_src

*** Calfw

Calfw is my default calendar tool. I bind it to F6 key.

#+begin_src emacs-lisp
  (use-package calfw)
  (use-package calfw-org
    :requires calfw
    :config (progn
	      (setq cfw:org-overwrite-default-keybinding t)
	      (global-set-key (kbd "<f6>")
			      (lambda ()
				(interactive)
				(cfw:open-org-calendar)))))
#+end_src

*** Journal

Org journal is useful for keeping up notes on a journal.
My journal files are kept in a sensitive file.

#+begin_src emacs-lisp
(load (expand-file-name (concat user-emacs-directory "sensitive/journal.el")))
(use-package org-journal
  :init
  (defun org-journal-load-files ()
    (interactive)
    (when (not org-journal-loaded)
      (setq org-agenda-file-regexp "\\`[^.].*\\.org'\\|[0-9]$")
      (add-to-list 'org-agenda-files org-journal-dir)
      (setq org-journal-loaded t)))
  :config (setq org-journal-loaded nil))

#+end_src

Anniversaries can be seen by including my diary.

#+begin_src emacs-lisp
(setq org-agenda-include-diary t)
#+end_src

*** Trello

Trello support. Not much needs to be said.

#+begin_src emacs-lisp
  (use-package org-trello)
#+end_src

*** Templates

Unfortunately, newer versions of Org do not include template
snippets. Let's fix this.

#+begin_src emacs-lisp
(define-key org-mode-map (kbd "C-c C-x t") #'org-insert-structure-template)

(setq org-structure-template-alist
      '(("a" . "export ascii")
        ("c" . "center")
        ("C" . "comment")
        ("e" . "example")
        ("E" . "export")
        ("h" . "export html")
        ("l" . "export latex")
        ("q" . "quote")
        ("s" . "src")
        ("v" . "verse")))
#+end_src

*** Exports and Org-Babel

Let's begin by setting up a few things for Babel.

#+begin_src emacs-lisp
(setq org-export-allow-bind-keywords t)

(use-package ob-go)
(use-package ess) ;; package for languages such as Julia, R
(org-babel-do-load-languages 'org-babel-load-languages
                             '((lisp   . t)
                               (go     . t)
                               (shell  . t)
                               (dot    . t)
                               (js     . t)
                               (julia  . t)
                               (C      . t)
                               (scheme . t)
                               (shen   . t)
                               (prolog . t)
                               (python . t)
                               (ein    . t)))

(mapc (lambda (x)
        (add-to-list 'org-babel-tangle-lang-exts x))
      '(("js"      . "js")
        ("gnu-apl" . "apl")))
#+end_src

# I'd like that the export process occurs in parallel. Some LaTeX files
# just end up taking a long time.

#+begin_src emacs-lisp
;; (setq org-export-in-background t)
#+end_src

**** HTML

Configure Htmlize to preferred defaults.

#+begin_src emacs-lisp
(use-package htmlize
  :config (setq htmlize-output-type 'css))
#+end_src

**** LaTeX

#+begin_src emacs-lisp
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))

(add-to-list 'org-latex-classes
	     '("abntex2"
	       "\\documentclass{abntex2}
		  [NO-DEFAULT-PACKAGES]
		  [EXTRA]"
	       ("\\section{%s}" . "\\section*{%s}")
	       ("\\subsection{%s}" . "\\subsection*{%s}")
	       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
	       ("\\paragraph{%s}" . "\\paragraph*{%s}")
	       ("\\subparagraph{%s}" . "\\subparagraph*{%s}")
	       ("\\maketitle" . "\\imprimircapa")))

(add-to-list 'org-latex-classes
             '("standalone"
               "\\documentclass{standalone}
                [NO-DEFAULT-PACKAGES]"))
#+end_src

I also like to use the plain PDF export.

#+begin_src emacs-lisp
(setq org-latex-pdf-process '("latexmk -shell-escape -bibtex -f -pdfxe -8bit %f"))
#+end_src

Also, for buffer images to scale and look good, we use this:

#+begin_src emacs-lisp
;;(plist-put org-format-latex-options :scale 1.2)
#+end_src

When using the =minted= package for source code, make sure that /Common
Lisp/ uses highlighting:

#+begin_src emacs-lisp
(setq org-latex-listings 'minted)
(add-to-list 'org-latex-minted-langs
	     '(lisp "common-lisp"))
(add-to-list 'org-latex-packages-alist '("" "minted"))
#+end_src

=inputenc= configuration for Unicode characters.

#+begin_src emacs-lisp
(setq org-latex-inputenc-alist '(("utf8" . "utf8x")))
#+end_src

Using =mathletters= from =ucs= also helps a lot.

#+begin_src emacs-lisp
(add-to-list 'org-latex-default-packages-alist
             '("mathletters" "ucs" nil))
#+end_src

**** Reveal.js

Export presentations to Reveal.js.

#+begin_src emacs-lisp
(use-package ox-reveal
  :config (setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.9.2/js/reveal.min.js"
                org-reveal-root "http://cdn.jsdelivr.net/reveal.js@3.9.2/"
                org-reveal-mathjax t))
#+end_src

**** Epub

Export Org filex to Epub format.

#+begin_src emacs-lisp
(use-package ox-epub)
#+end_src

*** Org Capture and Org Protocol

Org Protocol configures Emacs to deal properly with the Org Capture
extension for browsers.

Org protocol file location is stored in a sensitive file.

#+begin_src emacs-lisp
  (require 'org-protocol)
  (require 'org-capture)
  (defun sqbrackets->rndbrackets (string)
    (concat (mapcar #'(lambda (c)
	  (cond ((equal c ?\[) ?\()
		((equal c ?\]) ?\))
		(t c)))
      string)))

  (load (expand-file-name (concat user-emacs-directory "sensitive/org-protocol.el")))

  (setq org-capture-templates
    `(("p"
       "Protocol" entry (file+headline ,org-capture-file "Inbox")
       ,(concat "* [[%:link][%(sqbrackets->rndbrackets \"%:description\")]]\n"
		"#+begin_quote\n"
		"%i\n"
		"#+end_quote\n\n"
		"Acesso em: %U\n\n"))
      ("L" "Protocol Link" entry (file+headline ,org-capture-file "Inbox")
       ,(concat "* [[%:link][%(sqbrackets->rndbrackets \"%:description\")]]\n"
		"Acesso em: %U\n\n"))))
#+end_src

Here is an example of file, which you should store at, say,
=~/.local/share/applications/org-protocol.desktop=:

#+BEGIN_EXAMPLE
[Desktop Entry]
Name=org-protocol
Exec=emacsclient -c "%u"
Type=Application
Terminal=false
Categories=System;
MimeType=x-scheme-handler/org-protocol;
#+END_EXAMPLE

*** Org-ref

Org-ref is the best tool for managing bibliography.
Bibliography location is stored on a sensitive file.

#+begin_src emacs-lisp
  (use-package org-ref
    :config (progn
              (load (expand-file-name (concat user-emacs-directory "sensitive/org-ref.el"))))
              (require 'org-ref-pdf)
              (require 'org-ref-bibtex)
              (require 'org-ref-url-utils))
#+end_src

I also need a different citation type to conform with ABNT rules. This
makes sure that ABNTeX2's =\citeonline{}= works.

#+begin_src emacs-lisp
(org-ref-define-citation-link "citeonline" ?o)
#+end_src

*** Presentations

I use Epresentation which makes Emacs fullscreen in org.

#+begin_src emacs-lisp
(use-package epresent)
#+end_src

** APL

APL language configuration, for writing APL programs.

*** GNU APL

#+begin_src emacs-lisp
(use-package gnu-apl-mode
  :config (setq gnu-apl-show-tips-on-start nil))
#+end_src

Since I already use the SUPER key on =bspwm=, I bind SUPER+p for APL
input.

#+begin_src emacs-lisp
(setq gnu-apl-mode-map-prefix "s-p")
#+end_src

I sometimes use GNU FreeFont when programming in APL. The hooks are
commented out, because usually the fonts I use have great support for
APL symbols. However, the APL Keyboard needs FreeFont to render
correctly.

I also added support for APL385 Unicode font (which can be found on
Dyalog APL's page).

#+begin_src emacs-lisp
(defvar buffer-face-mode-face)

(defun gnu-apl-font-use-freemono ()
  (interactive)
  (setq buffer-face-mode-face '(:family "FreeMono" :height 100))
  (buffer-face-mode))

(defun gnu-apl-font-use-385 ()
  (interactive)
  (setq buffer-face-mode-face '(:family "APL385 Unicode" :height 90))
  (buffer-face-mode))

;; (add-hook 'gnu-apl-interactive-mode-hook 'gnu-apl-font-use-freemono)
;; (add-hook 'gnu-apl-mode-hook 'gnu-apl-font-use-freemono)
(add-hook 'gnu-apl-interactive-mode-hook 'gnu-apl-font-use-385)
(add-hook 'gnu-apl-mode-hook 'gnu-apl-font-use-385)
(add-hook 'gnu-apl-keymap-mode-hook 'gnu-apl-font-use-freemono)
#+end_src

We need to set the input method for APL buffers. If it doesn't work, use =M-x
set-input-method=:

#+begin_src emacs-lisp
(mapc (lambda (x)
        (add-hook x (lambda ()
                      (set-input-method "APL-Z"))))
      '(gnu-apl-interactive-mode-hook
        gnu-apl-mode-hook))
#+end_src

Switch to =APL-Z= input method with =C-\=!

*** Dyalog APL

For performance and extra tools, I use Dyalog for UNIX, though not in
Emacs. However, =.dyalog= file type support is desired:

#+begin_src emacs-lisp
(use-package dyalog-mode)
#+end_src

Dyalog buffers are more usable with the APL385 Unicode font,
previously stated on GNU APL section.

#+begin_src emacs-lisp
(add-hook 'dyalog-mode-hook 'gnu-apl-font-use-385)
#+end_src

**** XCompose helper

One extra thing to remember is that one might want to input some
characters in Dyalog APL. If enabling the APL keyboard is not working,
then we just need to configure our =~/.XCompose= file.

Here is how I enable my compose key to RCtrl on =.xinitrc=:

#+begin_example
$ setxkbmap -layout br -variant abnt2 -option compose:rctrl
#+end_example

Here is a part of =.XCompose= which binds =RCtrl + A= to write some APL
characters.

#+begin_src config-general :tangle no
# APL Characters
# https://www.x.org/releases/X11R7.7/doc/libX11/i18n/compose/en_US.UTF-8.html
<Multi_key> <a> <dead_grave>      : "⋄"
<Multi_key> <a> <s>               : "⌈"
<Multi_key> <a> <exclam>          : "⌶"
<Multi_key> <a> <1>               : "¨"
<Multi_key> <a> <at>              : "⍫"
<Multi_key> <a> <2>               : "¯"
<Multi_key> <a> <numbersign>      : "⍒"
<Multi_key> <a> <3>               : "<"
<Multi_key> <a> <dollar>          : "⍋"
<Multi_key> <a> <4>               : "≤"
<Multi_key> <a> <percent>         : "⌽"
<Multi_key> <a> <5>               : "="
<Multi_key> <a> <dead_circumflex> : "⍉"
<Multi_key> <a> <6>               : "≥"
<Multi_key> <a> <ampersand>       : "⊖"
<Multi_key> <a> <7>               : ">"
<Multi_key> <a> <asterisk>        : "⍟"
<Multi_key> <a> <8>               : "≠"
<Multi_key> <a> <parenleft>       : "⍱"
<Multi_key> <a> <9>               : "∨"
<Multi_key> <a> <parenright>      : "⍲"
<Multi_key> <a> <0>               : "∧"
<Multi_key> <a> <underscore>      : "!"
<Multi_key> <a> <minus>           : "×"
<Multi_key> <a> <plus>            : "⌹"
<Multi_key> <a> <equal>           : "÷"
<Multi_key> <a> <q>               : "?"
<Multi_key> <a> <W>               : "⍹"
<Multi_key> <a> <w>               : "⍵"
<Multi_key> <a> <E>               : "⍷"
<Multi_key> <a> <e>               : "∊"
<Multi_key> <a> <r>               : "⍴"
<Multi_key> <a> <T>               : "⍨"
<Multi_key> <a> <t>               : "∼"
<Multi_key> <a> <Y>               : "¥"
<Multi_key> <a> <y>               : "↑"
<Multi_key> <a> <u>               : "↓"
<Multi_key> <a> <I>               : "⍸"
<Multi_key> <a> <i>               : "⍳"
<Multi_key> <a> <O>               : "⍥"
<Multi_key> <a> <o>               : "○"
<Multi_key> <a> <P>               : "⍣"
<Multi_key> <a> <p>               : "⋆"
<Multi_key> <a> <braceleft>       : "⍞"
<Multi_key> <a> <bracketleft>     : "←"
<Multi_key> <a> <braceright>      : "⍬"
<Multi_key> <a> <bracketright>    : "→"
<Multi_key> <a> <bar>             : "⊣"
<Multi_key> <a> <backslash>       : "⊢"
<Multi_key> <a> <A>               : "⍶"
<Multi_key> <a> <a>               : "⍺"
<Multi_key> <a> <s>               : "⌈"
<Multi_key> <a> <d>               : "⌊"
<Multi_key> <a> <F>               : "⍫"
<Multi_key> <a> <f>               : "_"
<Multi_key> <a> <g>               : "∇"
<Multi_key> <a> <H>               : "⍙"
<Multi_key> <a> <h>               : "∆"
<Multi_key> <a> <J>               : "⍤"
<Multi_key> <a> <j>               : "∘"
<Multi_key> <a> <K>               : "⌺"
<Multi_key> <a> <k>               : "'"
<Multi_key> <a> <L>               : "⌷"
<Multi_key> <a> <l>               : "⎕"
<Multi_key> <a> <colon>           : "≡"
<Multi_key> <a> <semicolon>       : "⍎"
<Multi_key> <a> <quotedbl>        : "≢"
<Multi_key> <a> <apostrophe>      : "⍕"
<Multi_key> <a> <z>               : "⊂"
<Multi_key> <a> <X>               : "χ"
<Multi_key> <a> <x>               : "⊃"
<Multi_key> <a> <C>               : "⍧"
<Multi_key> <a> <c>               : "∩"
<Multi_key> <a> <v>               : "∪"
<Multi_key> <a> <B>               : "£"
<Multi_key> <a> <b>               : "⊥"
<Multi_key> <a> <n>               : "⊤"
<Multi_key> <a> <m>               : "|"
<Multi_key> <a> <less>            : "⍪"
<Multi_key> <a> <comma>           : "⍝"
<Multi_key> <a> <greater>         : "⍀"
# <Multi_key> <a> <period>        : "."
<Multi_key> <a> <question>        : "⍠"
<Multi_key> <a> <slash>           : "⌿"
#+end_src

** Assembly

Make sure =nasm-mode= is used for all Assembly files.

#+begin_src emacs-lisp
  (use-package nasm-mode
    :config (add-to-list 'auto-mode-alist '("\\.asm\\'" . nasm-mode)))
#+end_src

** C/C++

Configure C/C++ support for my taste. Defaults include indentation
of width 4 with spaces, K&R style.

#+begin_src emacs-lisp
(require 'cc-mode)

(defun my-c-mode-hook ()
  (setq c-basic-offset   4
        c-default-style  "k&r"
        indent-tabs-mode nil)
  (c-set-offset 'substatement-open 0))

(add-hook 'c++-mode-hook #'my-c-mode-hook)
(add-hook 'c-mode-hook   #'my-c-mode-hook)
#+end_src

# Setup CMake IDE. Notice that we need to have rtags installed
# on the system.

#+begin_src emacs-lisp
;; (use-package rtags)
;; (use-package cmake-ide
;;     :config (cmake-ide-setup))
#+end_src

#  Setup Company C Headers for autocompletion.

#+begin_src emacs-lisp
;; (use-package company)
;; (use-package company-c-headers
;;   :requires company
;;   :init (add-to-list 'company-backends 'company-c-headers))
#+end_src

# To help with autocompletion, we use semantic, previously configured.

To help with autocompletion, we use =irony= and =company-irony=.

#+begin_src emacs-lisp
(use-package company)
(use-package company-irony
  :requires 'company
  :config
  (add-to-list 'company-backends 'company-irony))
#+end_src

** Forth

Use forth-mode and configure keybindings for evaluating code blocks.

#+begin_src emacs-lisp
  (use-package forth-mode
    :config (progn
	      (define-key forth-mode-map (kbd "C-x C-e") #'forth-eval-last-expression)
	      (define-key forth-mode-map (kbd "C-c C-c") #'forth-eval-region)))

#+end_src

** Futhark

Use futhark-mode for Futhark support.

#+begin_src emacs-lisp
(use-package futhark-mode)
#+end_src

** Go

We use go-mode and godoctor to help with autocompletions and indentations.
We also set indentation to tabs of width 4.

We also rely on flycheck for Go.

#+begin_src emacs-lisp
  (use-package go-mode
    :config (progn
	      (use-package godoctor)
	      (add-hook 'go-mode-hook #'company-mode)
	      (add-hook 'go-mode-hook  #'flycheck-mode)
	      (add-hook 'go-mode-hook (lambda ()
					(setq indent-tabs-mode 1
					      tab-width        4)))
	      (add-to-list 'company-backends 'company-go)))
#+end_src

** Haskell

Just make sure we are using intero-mode.

#+begin_src emacs-lisp
(use-package intero
  :config (add-hook 'haskell-mode-hook 'intero-mode))
#+end_src

** Julia

#+begin_src emacs-lisp
(use-package julia-mode)
#+end_src

** Lean

#+begin_src emacs-lisp
(use-package lean-mode)
(use-package company-lean)
#+end_src

** Lisp

There are many dialects of Lisp! I mostly work with Common Lisp,
Scheme, Elisp and Racket.

*** Common Lisp
Here, we use Roswell to manage our SLIME installation.

#+begin_src emacs-lisp
(load (expand-file-name "~/.roswell/helper.el"))
#+end_src

Let's also make sure that we have our function which starts SLIME
on a specific directory. This is useful for using Qlot.

#+begin_src emacs-lisp
(defun slime-qlot-exec (directory)
  (interactive (list (read-directory-name "Project directory: ")))
  (slime-start :program "qlot"
               :program-args '("exec" "ros" "-S" "." "run")
               :directory directory
               :name 'qlot
               :env (list (concat "PATH=" (mapconcat 'identity exec-path ":")))))
#+end_src

*** Scheme

We just make sure Geiser is installed, Plus, set its default implementation
to Chez Scheme.

#+begin_src emacs-lisp
(use-package geiser
  :config (setq geiser-default-implementation 'chez))
#+end_src

We also make sure that we have Racket support.

#+begin_src emacs-lisp
(use-package racket-mode)
#+end_src

*** Shen

We use Shen's Elisp backend.

#+begin_src emacs-lisp
(use-package shen-mode)
(use-package shen-elisp)
#+end_src

*** Clojure

#+begin_src emacs-lisp
(use-package clojure-mode)
#+end_src

**** CIDER

#+begin_src emacs-lisp
(use-package cider)
#+end_src

*** Appearance

Use prettify-symbols-mode on all Lisps.

#+begin_src emacs-lisp
(mapc (lambda (hook) (add-hook hook #'prettify-symbols-mode))
      '(lisp-mode-hook
        emacs-lisp-mode-hook
        scheme-mode-hook
        shen-mode-hook
        clojure-mode-hook))
#+end_src

Use rainbow-delimiters to colorize parens.

#+begin_src emacs-lisp
(use-package rainbow-delimiters
  :config (mapc (lambda (hook) (add-hook hook #'rainbow-delimiters-mode))
		'(lisp-mode-hook
		  emacs-lisp-mode-hook
		  scheme-mode-hook
		  shen-mode-hook
		  clojure-mode-hook)))
#+end_src

Highlight parentheses to highlight what we're closing.
Instead of resorting to external stuff, we use Emacs' built-in
=show-paren-mode=.

There are three modes for =show-paren-mode=. One which highlights the
brackets only, one which highlights the whole expression, and one
which is mixed (highlights expression if the matching paren is not
visible). I opt for the latter.

For more information, check out [[http://ergoemacs.org/emacs/emacs_highlight_parenthesis.html][this article]] on ErgoEmacs.

#+begin_src emacs-lisp
(require 'paren)
(show-paren-mode 1)
(setq show-paren-style 'mixed)
#+end_src

Also, damn that whole mix-up of tabs and spaces on all Lisps. Just use
spaces at once.

#+begin_src emacs-lisp
(mapc (lambda (hook)
        (add-hook hook #'(lambda () (setq indent-tabs-mode nil))))
      '(lisp-mode-hook
        emacs-lisp-mode-hook
        scheme-mode-hook
        shen-mode-hook
        clojure-mode-hook))
#+end_src

** Unison

#+begin_src emacs-lisp
(use-package unison-mode)
#+end_src

** Python

Make sure Python 3 is installed. Also, run these on console:

#+begin_src bash :eval no
pip install --user --upgrade pip
pip install --user --upgrade ipython
pip install --user --upgrade pyzmq
pip install --user --upgrade jupyter
#+end_src

We begin by installing Python Mode. We also enable Flycheck.

#+begin_src emacs-lisp
(use-package python-mode
  :config (progn
            (setq py-shell-name                  "ipython"
                  py-which-bufname               "IPython"
                  py-python-command-args         '("-colors" "Linux")
                  py-smart-indentation           t)
            (add-hook 'python-mode-hook #'flycheck-mode)))
#+end_src

Now we add the org-mode integration for ipython.

#+begin_src emacs-lisp
(use-package ob-ipython)
#+end_src

And org-mode integration for Emacs IPython Notebook (ein).

#+begin_src emacs-lisp
(use-package ein)
#+end_src

** Prolog

Use Prolog on Org.

#+begin_src emacs-lisp
(use-package ob-prolog)
#+end_src

** PureScript

We use the PureScript IDE. Make sure PureScript is properly installed.

#+begin_src emacs-lisp
(use-package purescript-mode)
(use-package psc-ide
  :requires purescript-mode
  :config (progn
	    (add-hook 'purescript-mode-hook #'psc-ide-mode)
	    (add-hook 'purescript-mode-hook #'company-mode)
	    (add-hook 'purescript-mode-hook #'flycheck-mode)
	    (add-hook 'purescript-mode-hook #'prettify-symbols-mode)
	    (add-hook 'purescript-mode-hook #'turn-on-purescript-indentation)
	    (setq psc-ide-use-npm-bin t)))

#+end_src

** OCaml

Must go before ReasonML.

*** Utop

#+begin_src emacs-lisp
(use-package utop
  :config
  (progn
    (add-to-list 'load-path
                 (replace-regexp-in-string
                  "\n" "/share/emacs/site-lisp"
                  (shell-command-to-string "opam config var prefix")))
    (autoload 'utop "utop" "Toplevel for OCaml")
    (setq utop-command "opam config exec -- utop -emacs")))
#+end_src

** ReasonML
*** Merlin

#+begin_src emacs-lisp
(let ((opam-share (ignore-errors (car (process-lines "opam" "config" "var"
                                                     "share")))))
  (when (and opam-share (file-directory-p opam-share))
    ;; Register Merlin
    (add-to-list 'load-path (expand-file-name "emacs/site-lisp" opam-share))
    (autoload 'merlin-mode "merlin" nil t nil)
    ;; Automatically start it in OCaml buffers
    (add-hook 'tuareg-mode-hook 'merlin-mode t)
    (add-hook 'caml-mode-hook 'merlin-mode t)
    ;; Use opam switch to lookup ocamlmerlin binary
    (setq merlin-command 'opam)))
#+end_src

#+begin_src emacs-lisp
(use-package merlin)
#+end_src

*** reason-mode

#+begin_src emacs-lisp
(use-package reason-mode)
#+end_src

#+begin_src emacs-lisp
(defun shell-cmd (cmd)
  "Returns the stdout output of a shell command or nil if the command returned
   an error"
  (car (ignore-errors (apply 'process-lines (split-string cmd)))))

(defun reason-cmd-where (cmd)
  (let ((where (shell-cmd cmd)))
    (if (not (string-equal "unknown flag ----where" where))
        where)))

(let* ((refmt-bin (or (reason-cmd-where "refmt ----where")
                      (shell-cmd "which refmt")
                      (shell-cmd "which bsrefmt")))
       (merlin-bin (or (reason-cmd-where "ocamlmerlin ----where")
                       (shell-cmd "which ocamlmerlin")))
       (merlin-base-dir (when merlin-bin
                          (replace-regexp-in-string "bin/ocamlmerlin$" "" merlin-bin))))
  ;; Add merlin.el to the emacs load path and tell emacs where to find ocamlmerlin
  (when merlin-bin
    (add-to-list 'load-path (concat merlin-base-dir "share/emacs/site-lisp/"))
    (setq merlin-command merlin-bin))

  (when refmt-bin
    (setq refmt-command refmt-bin)))

(require 'reason-mode)
(require 'merlin)
(add-hook 'reason-mode-hook (lambda ()
                              (add-hook 'before-save-hook 'refmt-before-save)
                              (merlin-mode)))

(setq merlin-ac-setup t)
#+end_src

*** rtop

Depends on OCaml utop integration

#+begin_src emacs-lisp
(defun rtop-minor-mode (&optional arg)
  (set (make-local-variable 'utop-command)
       "opam config exec -- rtop -emacs")
  (utop-minor-mode arg))

(add-hook 'reason-mode-hook #'rtop-minor-mode)
#+end_src

** Rust

Make some adjustments to support Rust language. We use rust-mode and
racer via company for autocompletions.

#+begin_src emacs-lisp
  (use-package rust-mode
    :config (progn
	      (add-hook 'rust-mode-hook 'cargo-minor-mode)
	      (add-hook 'rust-mode-hook
			(lambda ()
			  (local-set-key (kbd "C-c <tab>") #'rust-format-buffer)))
	      (use-package racer
		:config (progn
			  (add-hook 'rust-mode-hook #'racer-mode)
			  (add-hook 'racer-mode-hook #'eldoc-mode)
			  (add-hook 'racer-mode-hook #'company-mode)))
	      (define-key rust-mode-map (kbd "TAB") #'company-indent-or-complete-common)
	      (setq company-tooltip-align-annotations t)))
#+end_src

** TeX

Use latex-preview-pane for comfortable editing.

#+begin_src emacs-lisp
  (use-package latex-preview-pane
    :config
    (when (display-graphic-p)
      (latex-preview-pane-enable)))
#+end_src

To compile the current file, we resort to Rubber, an external tool.

#+begin_src emacs-lisp
  (defun rubber-compile-file ()
    (interactive)
    (shell-command
     (concat "rubber -d " buffer-file-name))
    (message "Finished LaTeX compilation."))
#+end_src

It is also interesting to have pretty symbols for our LaTeX files.

#+begin_src emacs-lisp
  (use-package latex-pretty-symbols)
#+end_src

** Web

We use web-mode for anything web-related. It also uses js2-mode for
easier parens/javascript editing.

#+begin_src emacs-lisp
  (use-package web-mode
    :init (progn
	    (add-to-list 'auto-mode-alist '("\\.phtml\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.tpl\\.php\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.[agj]sp\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.as[cp]x\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.erb\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.mustache\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.djhtml\\'" . web-mode))
	    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode)))
    :config (progn
	      (add-hook 'web-mode-hook
			(lambda ()
			  (setq web-mode-enable-auto-closing t)
			  (setq web-mode-markup-indent-offset 2)
			  (setq web-mode-css-indent-offset 4)
			  (setq web-mode-code-indent-offset 4)
			  (setq web-mode-indent-style 2)
			  (setq web-mode-ac-sources-alist
				'(("css"  . (ac-source-css-property))
				  ("html" . (ac-source-words-in-buffer
					     ac-source-abbrev))))))
	      (use-package json-mode)
	      (use-package js2-mode
		:config (progn
			  (setq js2-highlight-level 3)
			  (use-package flow-js2-mode
			    :config (add-hook 'js2-mode-hook 'flow-minor-enable-automatically))
			  (add-to-list 'auto-mode-alist '("\\.js\\'" . js2-mode))))))
#+end_src

*** Node.js

I use =tern.js= for JS autocompletions with Node.js. Make sure you have
=tern= installed. You should also take a look at [[https://truongtx.me/2014/04/20/emacs-javascript-completion-and-refactoring][this tutorial]].

#+begin_src emacs-lisp
(use-package tern)
(use-package tern-auto-complete
  :config (progn
	    (add-hook 'js2-mode-hook (lambda () (tern-mode t)))
	    (add-hook 'js2-mode-hook 'auto-complete-mode)
	    (eval-after-load 'tern
	      '(progn
		 (require 'tern-auto-complete)
		 (tern-ac-setup)))))
#+end_src

For each new project, you need to create a =.tern-project= file on its
folder and drop the following contents:

#+begin_example
{
  "plugins": {
    "node": {
    }
  }
}
#+end_example

As for =npm=, I just install =npm-mode= and leave it globally enabled --
what the heck, I use Emacs as a daemon anyway. I'll disable if
anything seems weird.

(So yeah, it became weird. Having an "npm" mode around is a very
strange thing. I'll just disable it)

#+begin_src emacs-lisp
;; (use-package npm-mode
;;   :config (npm-global-mode))
#+end_src

** Config

We use a mode for editing Linux config files.

#+begin_src emacs-lisp
(use-package config-general-mode)
#+end_src

* Miscellaneous

Now we'll configure some useful tools.

** Company

#+begin_src emacs-lisp
  (use-package company
    :config (add-hook 'after-init-hook 'global-company-mode))
#+end_src

** Ansi-Term

Bind the F7 key to opening a new buffer with ZSH.

#+begin_src emacs-lisp
  (global-set-key [f7]
		  (lambda ()
		    (interactive)
		    (split-window-sensibly)
		    (other-window 1)
		    (ansi-term "/bin/zsh")))
#+end_src

** Projectile

I like to use Projectile for managing my projects.

#+begin_src emacs-lisp
  (use-package projectile)
#+end_src

** Neotree

I also like Neotree on the F8 key.

#+begin_src emacs-lisp
  (use-package all-the-icons)
  (use-package neotree
    :requires all-the-icons
    :config (progn
	      (global-set-key [f8] 'neotree-toggle)
	      (setq neo-theme (if (or (display-graphic-p)
				      (daemonp))
				  'icons
				'arrow)
		    projectile-switch-project-action 'neotree-projectile-action)))
#+end_src

** PDF Tools

#+begin_src emacs-lisp
(use-package pdf-tools
  :config (progn (pdf-tools-install)
                 (add-hook 'pdf-view-mode-hook 'pdf-view-midnight-minor-mode)
                 (add-hook 'pdf-view-mode-hook 'pdf-view-fit-width-to-window)))
#+end_src

** Mastodon

I like to access Mastodon from Emacs. The link to my instance is stored
in a sensitive file.

#+begin_src emacs-lisp
  (use-package mastodon
    :config
    (load (expand-file-name (concat user-emacs-directory "sensitive/mastodon.el"))))
#+end_src

** Slack

Same goes for Slack. (Unfortunately, Slack is defective for now, as it
relies on an oauth2 package)

#+begin_src emacs-lisp
  ;;(use-package slack)
  ;;(use-package alert
  ;;  :commands (alert)
  ;;  :init (setq alert-default-style 'notifier))
#+end_src

** WakaTime

I like to track my time with WakaTime. Gives me useful stats.
WakaTime uses an API key which is stored on a sensible file.

#+begin_src emacs-lisp
  (use-package wakatime-mode
    :config (progn
              (load (expand-file-name (concat user-emacs-directory "sensitive/wakatime.el")))
              (global-wakatime-mode)))
#+end_src

** nov.el

Nov.el is good for reading EPUB files on Emacs.

#+begin_src emacs-lisp
  (use-package nov
    :config (progn
	      (add-to-list 'auto-mode-alist '("\\.epub\\'" . nov-mode))
	      (add-hook 'nav-mode-hook
			(lambda ()
			  (face-remap-add-relative 'variable-pitch
						   :family "Liberation Serif"
						   :height 1.0)))
	      (setq nov-text-width 80)))
#+end_src

** Mu4e

Mu4e is my favorite e-mail application. Fortunately, it can be
installed from my distribution's package manager.

Personal stuff should be in =sensitive/mail.el=.

#+begin_src emacs-lisp
(when (eq system-type 'gnu/linux)
  (add-to-list 'load-path "/usr/share/emacs/site-lisp/mu4e")

  (require 'mu4e)
  (require 'smtpmail)

  (use-package mu4e-alert
    :config (progn
	      (mu4e-alert-set-default-style 'libnotify)
	      (add-hook 'after-init-hook #'mu4e-alert-enable-notifications)
	      (add-hook 'after-init-hook #'mu4e-alert-enable-mode-line-display)))

  (setq mail-user-agent                   'mu4e-user-agent
	message-send-mail-function        'smtpmail-send-it
	message-kill-buffer-on-exit       t
	mu4e-change-filenames-when-moving t
	mu4e-view-show-images             t)

  (when (fboundp 'imagemagick-register-types)
    (imagemagick-register-types))

  (load (expand-file-name (concat user-emacs-directory "sensitive/mail.el"))))
#+end_src

Let's make sure that mu4e messages wrap on column 80, just like Org. I
also like the usage of format=flowed.

#+begin_src emacs-lisp
(add-hook 'message-mode-hook 'auto-fill-mode)
(setq mu4e-compose-format-flowed t)
#+end_src

*** Extra configuration

I think it is interesting to describe other stuff I did here. I use
ProtonMail Bridge to help me manage my mail, and it is synced using
=mbsync=. To make it work, it is important to have some more
configuration.

Here is my =.mbsyncrc= file.

#+begin_example
IMAPAccount protonmail
Host 127.0.0.1
Port PROTONMAIL-BRIDGE-GIVEN-IMAP-PORT
User mymail@example.com
PassCmd "gpg2 -q -d /path/to/authinfo.gpg | awk 'FNR == 1 {print $8}'"
SSLType NONE

IMAPStore remote
Account protonmail

MaildirStore local
Subfolders Verbatim
Path  /path/to/my/mail/box
Inbox /path/to/my/mail/box/INBOX/

Channel inbox
Master :remote:
Slave :local:
Patterns * !"Drafts" !"All Mail"
Create Slave
SyncState *
Sync All
Expunge Both

Group protonmail
Channel inbox
#+end_example

And here is how I defined my Mu4e context for ProtonMail. I have
omitted the sensitive parts, but this should give you a heads-up on
how to setup the =mu4e-contexts= variable.



#+begin_src emacs-lisp :tangle no
;; This code snippet SHOULD NOT BE TANGLED with the rest of the
;; configuration. Edit the sensitive/mail.el file if you need
;; to modify this code.

(setq mu4e-compose-signature "My Awesome Signature"
      mu4e-maildir-shortcuts '(("/INBOX"   . ?i)
			       ("/Sent"    . ?s)
			       ("/Drafts"  . ?d)
			       ("/Archive" . ?a)
			       ("/Trash"   . ?t)))

(setq mu4e-contexts
      `(,(make-mu4e-context
          :name "Protonmail"
          :vars
	  `((mu4e-maildir          . ,(expand-file-name "/path/to/my/mail/box"))
	    (user-mail-address     . "mymail@example.com")
	    (user-full-name        . "My Name")
	    (mu4e-attachment-dir   . "/path/to/attachment/download/dir")
	    (mu4e-trash-folder     . "/Trash")
	    (mu4e-refile-folder    . "/Archive")
	    (mu4e-drafts-folder    . "/Drafts")
	    (mu4e-sent-folder      . "/Sent")
	    (mu4e-get-mail-command . "mbsync protonmail")
	    (smtpmail-smtp-user    . "mymail@example.com")
	    (smtpmail-stream-type  . starttls)
	    (smtpmail-auth-credentials . "/path/to/authinfo.gpg")
	    (smtpmail-smtp-server  . "127.0.0.1")
	    (smtpmail-smtp-service . PROTONMAIL-BRIDGE-GIVEN-SMTP-PORT)))))
#+end_src

** Elfeed

Elfeed is an RSS/Atom feed reader. The location of the Elfeed file is
kept in a sensitive file.

#+begin_src emacs-lisp
  (load (expand-file-name (concat user-emacs-directory "sensitive/elfeed.el")))
  (use-package elfeed-org)
  (use-package elfeed
    :requires elfeed-org
    :config (progn
	      (elfeed-org)
	      (setq-default elfeed-search-filter "@3-days-ago +unread ")
	      ;; Move forward and backward
	      (define-key elfeed-show-mode-map (kbd "C-<right>") 'elfeed-show-next)
	      (define-key elfeed-show-mode-map (kbd "C-<left>") 'elfeed-show-prev)
	      (define-key elfeed-show-mode-map (kbd "k") 'elfeed-show-next)
	      (define-key elfeed-show-mode-map (kbd "j") 'elfeed-show-prev)))
#+end_src

** Magit

Magit is the awesome tool for Git usage.

#+begin_src emacs-lisp
  (use-package magit)
#+end_src

** Helm-Spotify

Controlling Spotify from Emacs/Dashboard (via dbus) uses a Helm interface.

#+begin_src emacs-lisp
(use-package helm-spotify-plus)
#+end_src

If Emacs cannot access =dbus= (or Spotify is not recognized by =dbus=), it
may be interesting to have a script to invoke Emacs as follows (which
can be adapted into Spotify's):

#+begin_src bash :tangle no
#!/bin/bash

source $HOME/.dbus/session-bus/*
export DBUS_SESSION_BUS_ADDRESS
export DBUS_SESSION_BUS_PID
emacs --daemon &
#+end_src

** Helm-lobsters

Show Lobste.rs' top stories using Help.

#+begin_src emacs-lisp
(use-package helm-lobsters)
#+end_src

** w3m

For browsing inside Emacs, I usually use w3m.
#+begin_src emacs-lisp
(use-package w3m)
#+end_src

** Dashboard

Dashboard is the default startup page for my Emacs configuration.

#+begin_src emacs-lisp
  (use-package hackernews)
  (use-package dashboard
    :requires (all-the-icons hackernews)
    :config (progn
	      (dashboard-setup-startup-hook)
	      (setq initial-buffer-choice (lambda () (get-buffer "*dashboard*"))
		    dashboard-banner-logo-title "Welcome to GNU Emacs."
		    dashboard-startup-banner    'logo
		    dashboard-center-content    t
		    dashboard-set-heading-icons t
		    dashboard-set-file-icons    t
		    dashboard-set-navigator     t
		    dashboard-set-init-info     t
		    dashboard-set-navigator     t
		    
		    ;;; Items
		    dashboard-items '((bookmarks . 5)
				      (projects  . 5)
				      (agenda))

		    ;;; Footer
		    dashboard-footer-icon
		    (all-the-icons-octicon "dashboard"
					   :height 1.1
					   :v-adjust -0.05
					   :face 'font-lock-keyword-face)
		    
		    ;;; Buttons
		    dashboard-navigator-buttons
		    ;; Line 1
		    `((("★" "Blog" "Alchemist's Hideout"
			(lambda (&rest _)
			  (browse-url "http://alchemist.sdf.org")))
		       (,(all-the-icons-octicon "mark-github" :height 1.1 :v-adjust 0.0)
			"GitHub"
			"Go to GitHub profile"
			(lambda (&rest _)
			  (browse-url "https://github.com/luksamuk")))
		       (,(all-the-icons-faicon "gitlab" :height 1.1 :v-adjust 0.0)
			"GitLab"
			"Go to Gitlab profile"
			(lambda (&rest _)
			  (browse-url "https://gitlab.com/luksamuk")))
		       (,(all-the-icons-faicon "instagram" :height 1.1 :v-adjust 0.0)
			"Instagram" "Go to Instagram"
			(lambda (&rest _)
			  (browse-url "https://instagram.com")))
		       )
		      ((,(all-the-icons-faicon "comments" :height 1.1 :v-adjust 0.0)
			"Lobste.rs" "Open Lobste.rs client"
			(lambda (&rest _)
			  (helm-lobsters)))
		       (,(all-the-icons-faicon "hacker-news" :height 1.1 :v-adjust 0.0)
			"Hacker News" "Open Hacker News client"
			(lambda (&rest _)
			  (hackernews)))
		       (,(all-the-icons-faicon "spotify" :height 1.1 :v-adjust 0.0)
			"Spotify" "Open Spotify client"
			(lambda (&rest _)
			  (helm-spotify-plus)))
		       )
		      ;; Line 2
		      ((,(all-the-icons-faicon "hashtag" :height 1.1 :v-adjust 0.0)
			"Mastodon" "Open Mastodon client"
			(lambda (&rest _)
			  (mastodon)))
		       (,(all-the-icons-faicon "envelope" :height 1.1 :v-adjust 0.0)
			"Mail" "Open Mu4e mail client"
			(lambda (&rest _)
			  (mu4e)))
		       (,(all-the-icons-faicon "rss" :height 1.1 :v-adjust 0.0)
			"RSS" "Open Elfeed RSS client"
			(lambda (&rest _)
			  (elfeed)))
		       ;; (,(all-the-icons-faicon "slack" :height 1.1 :v-adjust 0.0)
		       ;; 	"Slack" "Open Slack client"
		       ;; 	(lambda (&rest _)
		       ;; 	  (slack-start)))
		       )
		      ;; Line 3
		      ((,(all-the-icons-faicon "external-link" :height 1.1 :v-adjust 0.0)
			"" "Browse website using w3m"
			(lambda (&rest _)
			  (w3m)))
		       (,(all-the-icons-faicon "refresh" :height 1.1 :v-adjust 0.0)
			"" "Refresh Dashboard"
			(lambda (&rest _)
			  (dashboard-refresh-buffer)))
		       )))))


#+end_src

** StumpWM

#+begin_src emacs-lisp
(use-package stumpwm-mode)
#+end_src

** Database GUI

Use =M-x edbi:open-db-viewer= to open a DB connection.

For MySQL for example, you might want to use a data source such as

~dbi:mysql:host=localhost;dbname=my-db;charset=utf8mb4~

#+begin_src emacs-lisp
(use-package edbi)
#+end_src

